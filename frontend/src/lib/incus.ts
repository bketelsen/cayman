// Code generated by tygo. DO NOT EDIT.

//////////
// source: access.go

/**
 * Access represents everyone that may access a particular resource.
 * swagger:model
 * API extension: instance_access.
 */
export type Access = AccessEntry[];
/**
 * AccessEntry represents an entity having access to the resource.
 * swagger:model
 * API extension: instance_access.
 */
export interface AccessEntry {
    /**
     * Certificate fingerprint
     * Example: 636b69519d27ae3b0e398cb7928043846ce1e3842f0ca7a589993dd913ab8cc9
     */
    identifier: string;
    /**
     * The role associated with the certificate
     * Example: admin, view, operator
     */
    role: string;
    /**
     * Which authorization method the certificate uses
     * Example: tls, openfga
     */
    provider: string;
}

//////////
// source: auth.go

/**
 * AuthenticationMethodTLS is the default authentication method for interacting with Incus remotely.
 */
export const AuthenticationMethodTLS = "tls";
/**
 * AuthenticationMethodOIDC is a token based authentication method.
 */
export const AuthenticationMethodOIDC = "oidc";

//////////
// source: certificate.go

/**
 * CertificateTypeClient indicates a client certificate type.
 */
export const CertificateTypeClient = "client";
/**
 * CertificateTypeServer indicates a server certificate type.
 */
export const CertificateTypeServer = "server";
/**
 * CertificateTypeMetrics indicates a metrics certificate type.
 */
export const CertificateTypeMetrics = "metrics";
/**
 * CertificateTypeUnknown indicates an unknown certificate type.
 */
export const CertificateTypeUnknown = "unknown";
/**
 * CertificatesPost represents the fields of a new certificate
 * swagger:model
 */
export interface CertificatesPost {
    CertificatePut: CertificatePut;
    /**
     * Trust token (used to add an untrusted client)
     * Example: blah
     */
    trust_token: string;
    /**
     * Whether to create a certificate add token
     * Example: true
     * API extension: certificate_token
     */
    token: boolean;
}
/**
 * CertificatePut represents the modifiable fields of a certificate
 * swagger:model
 * API extension: certificate_update.
 */
export interface CertificatePut {
    /**
     * Name associated with the certificate
     * Example: castiana
     */
    name: string;
    /**
     * Usage type for the certificate
     * Example: client
     */
    type: string;
    /**
     * Whether to limit the certificate to listed projects
     * Example: true
     * API extension: certificate_project
     */
    restricted: boolean;
    /**
     * List of allowed projects (applies when restricted)
     * Example: ["default", "foo", "bar"]
     * API extension: certificate_project
     */
    projects: string[];
    /**
     * The certificate itself, as PEM encoded X509 (or as base64 encoded X509 on POST)
     * Example: X509 PEM certificate
     * API extension: certificate_self_renewal
     */
    certificate: string;
    /**
     * Certificate description
     * Example: X509 certificate
     * API extension: certificate_description
     */
    description: string;
}
/**
 * Certificate represents a certificate
 * swagger:model
 */
export interface Certificate {
    CertificatePut: CertificatePut;
    /**
     * SHA256 fingerprint of the certificate
     * Read only: true
     * Example: fd200419b271f1dc2a5591b693cc5774b7f234e1ff8c6b78ad703b6888fe2b69
     */
    fingerprint: string;
}
/**
 * CertificateAddToken represents the fields contained within an encoded certificate add token.
 * swagger:model
 * API extension: certificate_token.
 */
export interface CertificateAddToken {
    /**
     * The name of the new client
     * Example: user@host
     */
    client_name: string;
    /**
     * The fingerprint of the network certificate
     * Example: 57bb0ff4340b5bb28517e062023101adf788c37846dc8b619eb2c3cb4ef29436
     */
    fingerprint: string;
    /**
     * The addresses of the server
     * Example: ["10.98.30.229:8443"]
     */
    addresses: string[];
    /**
     * The random join secret
     * Example: 2b2284d44db32675923fe0d2020477e0e9be11801ff70c435e032b97028c35cd
     */
    secret: string;
    /**
     * The token's expiry date.
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
}

//////////
// source: cluster.go

/**
 * Cluster represents high-level information about a cluster.
 * swagger:model
 * API extension: clustering.
 */
export interface Cluster {
    /**
     * Name of the cluster member answering the request
     * Example: server01
     */
    server_name: string;
    /**
     * Whether clustering is enabled
     * Example: true
     */
    enabled: boolean;
    /**
     * List of member configuration keys (used during join)
     * Example: []
     * API extension: clustering_join
     */
    member_config: ClusterMemberConfigKey[];
}
/**
 * ClusterMemberConfigKey represents a single config key that a new member of
 * the cluster is required to provide when joining.
 * The Value field is empty when getting clustering information with GET
 * /1.0/cluster, and should be filled by the joining server when performing a PUT
 * /1.0/cluster join request.
 * swagger:model
 * API extension: clustering_join.
 */
export interface ClusterMemberConfigKey {
    /**
     * The kind of configuration key (network, storage-pool, ...)
     * Example: storage-pool
     */
    entity: string;
    /**
     * The name of the object requiring this key
     * Example: local
     */
    name: string;
    /**
     * The name of the key
     * Example: source
     */
    key: string;
    /**
     * The value on the answering cluster member
     * Example: /dev/sdb
     */
    value: string;
    /**
     * A human friendly description key
     * Example: "source" property for storage pool "local"
     */
    description: string;
}
/**
 * ClusterPut represents the fields required to bootstrap or join a cluster.
 * swagger:model
 * API extension: clustering.
 */
export interface ClusterPut {
    Cluster: Cluster;
    /**
     * The address of the cluster you wish to join
     * Example: 10.0.0.1:8443
     */
    cluster_address: string;
    /**
     * The expected certificate (X509 PEM encoded) for the cluster
     * Example: X509 PEM certificate
     */
    cluster_certificate: string;
    /**
     * The local address to use for cluster communication
     * Example: 10.0.0.2:8443
     * API extension: clustering_join
     */
    server_address: string;
    /**
     * The cluster join token for the cluster you're trying to join
     * Example: blah
     * API extension: clustering_join
     */
    cluster_token: string;
}
/**
 * ClusterMembersPost represents the fields required to request a join token to add a member to the cluster.
 * swagger:model
 * API extension: clustering_join_token.
 */
export interface ClusterMembersPost {
    /**
     * The name of the new cluster member
     * Example: server02
     */
    server_name: string;
}
/**
 * ClusterMemberJoinToken represents the fields contained within an encoded cluster member join token.
 * swagger:model
 * API extension: clustering_join_token.
 */
export interface ClusterMemberJoinToken {
    /**
     * The name of the new cluster member
     * Example: server02
     */
    server_name: string;
    /**
     * The fingerprint of the network certificate
     * Example: 57bb0ff4340b5bb28517e062023101adf788c37846dc8b619eb2c3cb4ef29436
     */
    fingerprint: string;
    /**
     * The addresses of existing online cluster members
     * Example: ["10.98.30.229:8443"]
     */
    addresses: string[];
    /**
     * The random join secret.
     * Example: 2b2284d44db32675923fe0d2020477e0e9be11801ff70c435e032b97028c35cd
     */
    secret: string;
    /**
     * The token's expiry date.
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
}
/**
 * ClusterMemberPost represents the fields required to rename a cluster member.
 * swagger:model
 * API extension: clustering.
 */
export interface ClusterMemberPost {
    /**
     * The new name of the cluster member
     * Example: server02
     */
    server_name: string;
}
/**
 * ClusterMember represents a member of a cluster.
 * swagger:model
 * API extension: clustering.
 */
export interface ClusterMember {
    ClusterMemberPut: ClusterMemberPut;
    /**
     * Name of the cluster member
     * Example: server01
     */
    server_name: string;
    /**
     * URL at which the cluster member can be reached
     * Example: https://10.0.0.1:8443
     */
    url: string;
    /**
     * Whether the cluster member is a database server
     * Example: true
     */
    database: boolean;
    /**
     * Current status
     * Example: Online
     */
    status: string;
    /**
     * Additional status information
     * Example: fully operational
     */
    message: string;
    /**
     * The primary architecture of the cluster member
     * Example: x86_64
     * API extension: clustering_architecture
     */
    architecture: string;
}
/**
 * ClusterMemberPut represents the modifiable fields of a cluster member
 * swagger:model
 * API extension: clustering_edit_roles.
 */
export interface ClusterMemberPut {
    /**
     * List of roles held by this cluster member
     * Example: ["database"]
     * API extension: clustering_roles
     */
    roles: string[];
    /**
     * Name of the failure domain for this cluster member
     * Example: rack1
     * API extension: clustering_failure_domains
     */
    failure_domain: string;
    /**
     * Cluster member description
     * Example: AMD Epyc 32c/64t
     * API extension: clustering_description
     */
    description: string;
    /**
     * Additional configuration information
     * Example: {"scheduler.instance": "all"}
     * API extension: clustering_config
     */
    config: { [key: string]: string};
    /**
     * List of cluster groups this member belongs to
     * Example: ["group1", "group2"]
     * API extension: clustering_groups
     */
    groups: string[];
}
/**
 * ClusterCertificatePut represents the certificate and key pair for all cluster members
 * swagger:model
 * API extension: clustering_update_certs.
 */
export interface ClusterCertificatePut {
    /**
     * The new certificate (X509 PEM encoded) for the cluster
     * Example: X509 PEM certificate
     */
    cluster_certificate: string;
    /**
     * The new certificate key (X509 PEM encoded) for the cluster
     * Example: X509 PEM certificate key
     */
    cluster_certificate_key: string;
}
/**
 * ClusterMemberStatePost represents the fields required to evacuate a cluster member.
 * swagger:model
 * API extension: clustering_evacuation.
 */
export interface ClusterMemberStatePost {
    /**
     * The action to be performed. Valid actions are "evacuate" and "restore".
     * Example: evacuate
     */
    action: string;
    /**
     * Override the configured evacuation mode.
     * Example: stop
     * API extension: clustering_evacuate_mode
     */
    mode: string;
}
/**
 * ClusterGroupsPost represents the fields available for a new cluster group.
 * swagger:model
 * API extension: clustering_groups.
 */
export interface ClusterGroupsPost {
    ClusterGroupPut: ClusterGroupPut;
    /**
     * The new name of the cluster group
     * Example: group1
     */
    name: string;
}
/**
 * ClusterGroup represents a cluster group.
 * swagger:model
 * API extension: clustering_groups.
 */
export interface ClusterGroup {
    ClusterGroupPut: ClusterGroupPut;
    ClusterGroupPost: ClusterGroupPost;
}
/**
 * ClusterGroupPost represents the fields required to rename a cluster group.
 * swagger:model
 * API extension: clustering_groups.
 */
export interface ClusterGroupPost {
    /**
     * The new name of the cluster group
     * Example: group1
     */
    name: string;
}
/**
 * ClusterGroupPut represents the modifiable fields of a cluster group.
 * swagger:model
 * API extension: clustering_groups.
 */
export interface ClusterGroupPut {
    /**
     * The description of the cluster group
     * Example: amd64 servers
     */
    description: string;
    /**
     * List of members in this group
     * Example: ["server01", "server02"]
     */
    members: string[];
    /**
     * Cluster group configuration map
     * Example: {"user.mykey": "foo"}
     * API extension: clustering_groups_config.
     */
    config: { [key: string]: string};
}

//////////
// source: cluster_state.go

/**
 * ClusterMemberSysInfo represents the sysinfo of a cluster member.
 * swagger:model
 * API extension: cluster_member_state.
 */
export interface ClusterMemberSysInfo {
    uptime: number /* int64 */;
    load_averages: number /* float64 */[];
    total_ram: number /* uint64 */;
    free_ram: number /* uint64 */;
    shared_ram: number /* uint64 */;
    buffered_ram: number /* uint64 */;
    total_swap: number /* uint64 */;
    free_swap: number /* uint64 */;
    processes: number /* uint16 */;
}
/**
 * ClusterMemberState represents the state of a cluster member.
 * swagger:model
 * API extension: cluster_member_state.
 */
export interface ClusterMemberState {
    sysinfo: ClusterMemberSysInfo;
    storage_pools: { [key: string]: StoragePoolState};
}

//////////
// source: error.go

/**
 * StatusError error type that contains an HTTP status code and message.
 */
export interface StatusError {
}

//////////
// source: event.go

/**
 * Event types.
 */
export const EventTypeLifecycle = "lifecycle";
/**
 * Event types.
 */
export const EventTypeLogging = "logging";
/**
 * Event types.
 */
export const EventTypeOperation = "operation";
/**
 * Event types.
 */
export const EventTypeNetworkACL = "network-acl";
/**
 * Event represents an event entry (over websocket)
 * swagger:model
 */
export interface Event {
    /**
     * Event type (one of operation, logging or lifecycle)
     * Example: lifecycle
     */
    type: string;
    /**
     * Time at which the event was sent
     * Example: 2021-02-24T19:00:45.452649098-05:00
     */
    timestamp: string;
    /**
     * JSON encoded metadata (see EventLogging, EventLifecycle or Operation)
     * Example: {"action": "instance-started", "source": "/1.0/instances/c1", "context": {}}
     */
    metadata: any /* json.RawMessage */;
    /**
     * Originating cluster member
     * Example: server01
     * API extension: event_location
     */
    location?: string;
    /**
     * Project the event belongs to.
     * Example: default
     * API extension: event_project
     */
    project?: string;
}
/**
 * EventLogRecord represents single log record.
 */
export interface EventLogRecord {
    Time: string;
    Lvl: string;
    Msg: string;
    Ctx: any[];
}
/**
 * EventLogging represents a logging type event entry (admin only).
 */
export interface EventLogging {
    message: string;
    level: string;
    context: { [key: string]: string};
}
/**
 * EventLifecycle represents a lifecycle type event entry
 * API extension: event_lifecycle.
 */
export interface EventLifecycle {
    action: string;
    source: string;
    context?: { [key: string]: any};
    /**
     * API extension: event_lifecycle_requestor
     */
    requestor?: EventLifecycleRequestor;
    /**
     * API extension: event_lifecycle_name_and_project
     */
    name?: string;
    project?: string;
}
/**
 * EventLifecycleRequestor represents the initial requestor for an event
 * API extension: event_lifecycle_requestor.
 */
export interface EventLifecycleRequestor {
    username: string;
    protocol: string;
    /**
     * Requestor address
     * Example: 10.0.2.15
     * API extension: event_lifecycle_requestor_address
     */
    address: string;
}

//////////
// source: event_lifecycle.go

/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleCertificateCreated = "certificate-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleCertificateDeleted = "certificate-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleCertificateUpdated = "certificate-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterCertificateUpdated = "cluster-certificate-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterDisabled = "cluster-disabled";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterEnabled = "cluster-enabled";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterGroupCreated = "cluster-group-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterGroupDeleted = "cluster-group-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterGroupRenamed = "cluster-group-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterGroupUpdated = "cluster-group-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberAdded = "cluster-member-added";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberEvacuated = "cluster-member-evacuated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberHealed = "cluster-member-healed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberRemoved = "cluster-member-removed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberRenamed = "cluster-member-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberRestored = "cluster-member-restored";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterMemberUpdated = "cluster-member-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleClusterTokenCreated = "cluster-token-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleConfigUpdated = "config-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageAliasCreated = "image-alias-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageAliasDeleted = "image-alias-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageAliasRenamed = "image-alias-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageAliasUpdated = "image-alias-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageCreated = "image-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageDeleted = "image-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageRefreshed = "image-refreshed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageRetrieved = "image-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageSecretCreated = "image-secret-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleImageUpdated = "image-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceBackupCreated = "instance-backup-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceBackupDeleted = "instance-backup-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceBackupRenamed = "instance-backup-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceBackupRetrieved = "instance-backup-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceConsole = "instance-console";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceConsoleReset = "instance-console-reset";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceConsoleRetrieved = "instance-console-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceCreated = "instance-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceDeleted = "instance-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceExec = "instance-exec";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceFileDeleted = "instance-file-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceFilePushed = "instance-file-pushed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceFileRetrieved = "instance-file-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceLogDeleted = "instance-log-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceLogRetrieved = "instance-log-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMetadataRetrieved = "instance-metadata-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMetadataTemplateCreated = "instance-metadata-template-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMetadataTemplateDeleted = "instance-metadata-template-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMetadataTemplateRetrieved = "instance-metadata-template-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMetadataUpdated = "instance-metadata-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceMigrated = "instance-migrated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstancePaused = "instance-paused";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceReady = "instance-ready";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceRenamed = "instance-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceRestarted = "instance-restarted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceRestored = "instance-restored";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceResumed = "instance-resumed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceShutdown = "instance-shutdown";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceSnapshotCreated = "instance-snapshot-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceSnapshotDeleted = "instance-snapshot-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceSnapshotRenamed = "instance-snapshot-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceSnapshotUpdated = "instance-snapshot-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceStarted = "instance-started";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceStopped = "instance-stopped";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleInstanceUpdated = "instance-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkACLCreated = "network-acl-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkACLDeleted = "network-acl-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkACLRenamed = "network-acl-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkACLUpdated = "network-acl-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkAddressSetCreated = "network-address-set-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkAddressSetDeleted = "network-address-set-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkAddressSetRenamed = "network-address-set-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkAddressSetUpdated = "network-address-set-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkCreated = "network-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkDeleted = "network-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkForwardCreated = "network-forward-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkForwardDeleted = "network-forward-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkForwardUpdated = "network-forward-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkIntegrationCreated = "network-integration-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkIntegrationDeleted = "network-integration-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkIntegrationRenamed = "network-integration-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkIntegrationUpdated = "network-integration-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkLoadBalancerCreated = "network-load-balancer-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkLoadBalancerDeleted = "network-load-balancer-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkLoadBalancerUpdated = "network-load-balancer-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkPeerCreated = "network-peer-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkPeerDeleted = "network-peer-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkPeerUpdated = "network-peer-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkRenamed = "network-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkUpdated = "network-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneCreated = "network-zone-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneDeleted = "network-zone-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneRecordCreated = "network-zone-record-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneRecordDeleted = "network-zone-record-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneRecordUpdated = "network-zone-record-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleNetworkZoneUpdated = "network-zone-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleOperationCancelled = "operation-cancelled";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProfileCreated = "profile-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProfileDeleted = "profile-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProfileRenamed = "profile-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProfileUpdated = "profile-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProjectCreated = "project-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProjectDeleted = "project-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProjectRenamed = "project-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleProjectUpdated = "project-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketBackupCreated = "storage-bucket-backup-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketBackupDeleted = "storage-bucket-backup-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketBackupRenamed = "storage-bucket-backup-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketBackupRetrieved = "storage-bucket-backup-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketCreated = "storage-bucket-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketDeleted = "storage-bucket-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketKeyCreated = "storage-bucket-key-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketKeyDeleted = "storage-bucket-key-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketKeyUpdated = "storage-bucket-key-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageBucketUpdated = "storage-bucket-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStoragePoolCreated = "storage-pool-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStoragePoolDeleted = "storage-pool-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStoragePoolUpdated = "storage-pool-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeBackupCreated = "storage-volume-backup-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeBackupDeleted = "storage-volume-backup-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeBackupRenamed = "storage-volume-backup-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeBackupRetrieved = "storage-volume-backup-retrieved";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeCreated = "storage-volume-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeDeleted = "storage-volume-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeRenamed = "storage-volume-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeRestored = "storage-volume-restored";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeSnapshotCreated = "storage-volume-snapshot-created";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeSnapshotDeleted = "storage-volume-snapshot-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeSnapshotRenamed = "storage-volume-snapshot-renamed";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeSnapshotUpdated = "storage-volume-snapshot-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleStorageVolumeUpdated = "storage-volume-updated";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleWarningAcknowledged = "warning-acknowledged";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleWarningDeleted = "warning-deleted";
/**
 * Define consts for all the lifecycle events.
 */
export const EventLifecycleWarningReset = "warning-reset";

//////////
// source: image.go

/**
 * ImageExportPost represents the fields required to export an image
 * swagger:model
 * API extension: images_push_relay.
 */
export interface ImageExportPost {
    /**
     * Target server URL
     * Example: https://1.2.3.4:8443
     */
    target: string;
    /**
     * Image receive secret
     * Example: RANDOM-STRING
     */
    secret: string;
    /**
     * Remote server certificate
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * List of aliases to set on the image
     */
    aliases: ImageAlias[];
    /**
     * Project name
     * Example: project1
     * API extension: image_target_project
     */
    project: string;
    /**
     * List of profiles to use
     * Example: ["default"]
     * API extension: image_copy_profile
     */
    profiles: string[];
}
/**
 * ImagesPost represents the fields available for a new image
 * swagger:model
 */
export interface ImagesPost {
    ImagePut: ImagePut;
    /**
     * Original filename of the image
     * Example: image.tar.xz
     */
    filename: string;
    /**
     * Source of the image
     */
    source?: ImagesPostSource;
    /**
     * Compression algorithm to use when turning an instance into an image
     * Example: gzip
     * API extension: image_compression_algorithm
     */
    compression_algorithm: string;
    /**
     * Type of image format
     * Example: split
     * API extension: instance_publish_split
     */
    format: string;
    /**
     * Aliases to add to the image
     * Example: [{"name": "foo"}, {"name": "bar"}]
     * API extension: image_create_aliases
     */
    aliases: ImageAlias[];
}
/**
 * ImagesPostSource represents the source of a new image
 * swagger:model
 */
export interface ImagesPostSource {
    ImageSource: ImageSource;
    /**
     * Transfer mode (push or pull)
     * Example: pull
     */
    mode: string;
    /**
     * Type of image source (instance, snapshot, image or url)
     * Example: instance
     */
    type: string;
    /**
     * Source URL (for type "url")
     * Example: https://some-server.com/some-directory/
     */
    url: string;
    /**
     * Instance name (for type "instance" or "snapshot")
     * Example: c1/snap0
     */
    name: string;
    /**
     * Source image fingerprint (for type "image")
     * Example: 8ae945c52bb2f2df51c923b04022312f99bbb72c356251f54fa89ea7cf1df1d0
     */
    fingerprint: string;
    /**
     * Source image server secret token (when downloading private images)
     * Example: RANDOM-STRING
     */
    secret: string;
    /**
     * Source project name
     * Example: project1
     * API extension: image_source_project
     */
    project: string;
}
/**
 * ImagePut represents the modifiable fields of an image
 * swagger:model
 */
export interface ImagePut {
    /**
     * Whether the image should auto-update when a new build is available
     * Example: true
     */
    auto_update: boolean;
    /**
     * Descriptive properties
     * Example: {"os": "Ubuntu", "release": "jammy", "variant": "cloud"}
     */
    properties: { [key: string]: string};
    /**
     * Whether the image is available to unauthenticated users
     * Example: false
     */
    public: boolean;
    /**
     * When the image becomes obsolete
     * Example: 2025-03-23T20:00:00-04:00
     * API extension: images_expiry
     */
    expires_at: string;
    /**
     * List of profiles to use when creating from this image (if none provided by user)
     * Example: ["default"]
     * API extension: image_profiles
     */
    profiles: string[];
}
/**
 * Image represents an image
 * swagger:model
 */
export interface Image {
    ImagePut: ImagePut;
    /**
     * List of aliases
     */
    aliases: ImageAlias[];
    /**
     * Architecture
     * Example: x86_64
     */
    architecture: string;
    /**
     * Whether the image is an automatically cached remote image
     * Example: true
     */
    cached: boolean;
    /**
     * Original filename
     * Example: 06b86454720d36b20f94e31c6812e05ec51c1b568cf3a8abd273769d213394bb.rootfs
     */
    filename: string;
    /**
     * Full SHA-256 fingerprint
     * Example: 06b86454720d36b20f94e31c6812e05ec51c1b568cf3a8abd273769d213394bb
     */
    fingerprint: string;
    /**
     * Size of the image in bytes
     * Example: 272237676
     */
    size: number /* int64 */;
    /**
     * Where the image came from
     */
    update_source?: ImageSource;
    /**
     * Type of image (container or virtual-machine)
     * Example: container
     * API extension: image_types
     */
    type: string;
    /**
     * When the image was originally created
     * Example: 2021-03-23T20:00:00-04:00
     */
    created_at: string;
    /**
     * Last time the image was used
     * Example: 2021-03-22T20:39:00.575185384-04:00
     */
    last_used_at: string;
    /**
     * When the image was added to this server
     * Example: 2021-03-24T14:18:15.115036787-04:00
     */
    uploaded_at: string;
    /**
     * Project name
     * Example: project1
     * API extension: images_all_projects
     */
    project: string;
}
/**
 * ImageAlias represents an alias from the alias list of an image
 * swagger:model
 */
export interface ImageAlias {
    /**
     * Name of the alias
     * Example: ubuntu-22.04
     */
    name: string;
    /**
     * Description of the alias
     * Example: Our preferred Ubuntu image
     */
    description: string;
}
/**
 * ImageSource represents the source of an image
 * swagger:model
 */
export interface ImageSource {
    /**
     * Source alias to download from
     * Example: jammy
     */
    alias: string;
    /**
     * Source server certificate (if not trusted by system CA)
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * Source server protocol
     * Example: simplestreams
     */
    protocol: string;
    /**
     * URL of the source server
     * Example: https://images.linuxcontainers.org
     */
    server: string;
    /**
     * Type of image (container or virtual-machine)
     * Example: container
     * API extension: image_types
     */
    image_type: string;
}
/**
 * ImageAliasesPost represents a new image alias
 * swagger:model
 */
export interface ImageAliasesPost {
    ImageAliasesEntry: ImageAliasesEntry;
}
/**
 * ImageAliasesEntryPost represents the required fields to rename an image alias
 * swagger:model
 */
export interface ImageAliasesEntryPost {
    /**
     * Alias name
     * Example: ubuntu-22.04
     */
    name: string;
}
/**
 * ImageAliasesEntryPut represents the modifiable fields of an image alias
 * swagger:model
 */
export interface ImageAliasesEntryPut {
    /**
     * Alias description
     * Example: Our preferred Ubuntu image
     */
    description: string;
    /**
     * Target fingerprint for the alias
     * Example: 06b86454720d36b20f94e31c6812e05ec51c1b568cf3a8abd273769d213394bb
     */
    target: string;
}
/**
 * ImageAliasesEntry represents an image alias
 * swagger:model
 */
export interface ImageAliasesEntry {
    ImageAliasesEntryPut: ImageAliasesEntryPut;
    /**
     * Alias name
     * Example: ubuntu-22.04
     */
    name: string;
    /**
     * Alias type (container or virtual-machine)
     * Example: container
     * API extension: image_types
     */
    type: string;
}
/**
 * ImageMetadata represents image metadata (used in image tarball)
 * swagger:model
 */
export interface ImageMetadata {
    /**
     * Architecture name
     * Example: x86_64
     */
    architecture: string;
    /**
     * Image creation data (as UNIX epoch)
     * Example: 1620655439
     */
    creation_date: number /* int64 */;
    /**
     * Image expiry data (as UNIX epoch)
     * Example: 1620685757
     */
    expiry_date: number /* int64 */;
    /**
     * Descriptive properties
     * Example: {"os": "Ubuntu", "release": "jammy", "variant": "cloud"}
     */
    properties: { [key: string]: string};
    /**
     * Template for files in the image
     */
    templates: { [key: string]: ImageMetadataTemplate | undefined};
}
/**
 * ImageMetadataTemplate represents a template entry in image metadata (used in image tarball)
 * swagger:model
 */
export interface ImageMetadataTemplate {
    /**
     * When to trigger the template (create, copy or start)
     * Example: create
     */
    when: string[];
    /**
     * Whether to trigger only if the file is missing
     * Example: false
     */
    create_only: boolean;
    /**
     * The template itself as a valid pongo2 template
     * Example: pongo2-template
     */
    template: string;
    /**
     * Key/value properties to pass to the template
     * Example: {"foo": "bar"}
     */
    properties: { [key: string]: string};
    /**
     * The file owner uid.
     * Example: 1000
     * API extension: image_template_permissions
     */
    uid?: string;
    /**
     * The file owner gid.
     * Example: 1000
     * API extension: image_template_permissions
     */
    gid?: string;
    /**
     * The file permissions.
     * Example: 644
     * API extension: image_template_permissions
     */
    mode?: string;
}

//////////
// source: init.go

/**
 * InitPreseed represents initialization configuration that can be supplied to `init`.
 * swagger:model
 * API extension: preseed.
 */
export interface InitPreseed {
    Server: InitLocalPreseed;
    cluster?: InitClusterPreseed;
}
/**
 * InitLocalPreseed represents initialization configuration.
 * swagger:model
 * API extension: preseed.
 */
export interface InitLocalPreseed {
    ServerPut: ServerPut;
    /**
     * Networks by project to add
     * Example: Network on the "default" project
     */
    networks: InitNetworksProjectPost[];
    /**
     * Storage Pools to add
     * Example: local dir storage pool
     */
    storage_pools: StoragePoolsPost[];
    /**
     * Storage Volumes to add
     * Example: local dir storage volume
     * API extension: init_preseed_storage_volumes.
     */
    storage_volumes: InitStorageVolumesProjectPost[];
    /**
     * Profiles to add
     * Example: "default" profile with a root disk device
     */
    profiles: InitProfileProjectPost[];
    /**
     * Projects to add
     * Example: "default" project
     */
    projects: ProjectsPost[];
    /**
     * Certificates to add
     * Example: PEM encoded certificate
     * API extension: init_preseed_certificates.
     */
    certificates: CertificatesPost[];
}
/**
 * InitNetworksProjectPost represents the fields of a new network along with its associated project.
 * swagger:model
 * API extension: preseed.
 */
export interface InitNetworksProjectPost {
    NetworksPost: NetworksPost;
    /**
     * Project in which the network will reside
     * Example: "default"
     */
    Project: string;
}
/**
 * InitProfileProjectPost represents the fields of a new profile along with its associated project.
 * swagger:model
 * API extension: init_preseed_profile_project.
 */
export interface InitProfileProjectPost {
    ProfilesPost: ProfilesPost;
    /**
     * Project in which the profile will reside
     * Example: "default"
     */
    Project: string;
}
/**
 * InitStorageVolumesProjectPost represents the fields of a new storage volume along with its associated pool.
 * swagger:model
 * API extension: init_preseed_storage_volumes.
 */
export interface InitStorageVolumesProjectPost {
    StorageVolumesPost: StorageVolumesPost;
    /**
     * Storage pool in which the volume will reside
     * Example: "default"
     */
    Pool: string;
    /**
     * Project in which the volume will reside
     * Example: "default"
     */
    Project: string;
}
/**
 * InitClusterPreseed represents initialization configuration for the cluster.
 * swagger:model
 * API extension: preseed.
 */
export interface InitClusterPreseed {
    ClusterPut: ClusterPut;
    /**
     * The path to the cluster certificate
     * Example: /tmp/cluster.crt
     */
    cluster_certificate_path: string;
}

//////////
// source: instance.go

/**
 * InstanceType represents the type if instance being returned or requested via the API.
 */
export type InstanceType = string;
/**
 * InstanceTypeAny defines the instance type value for requesting any instance type.
 */
export const InstanceTypeAny = any;
/**
 * InstanceTypeContainer defines the instance type value for a container.
 */
export const InstanceTypeContainer = any;
/**
 * InstanceTypeVM defines the instance type value for a virtual-machine.
 */
export const InstanceTypeVM = any;
/**
 * InstancesPost represents the fields available for a new instance.
 * swagger:model
 * API extension: instances.
 */
export interface InstancesPost {
    InstancePut: InstancePut;
    /**
     * Instance name
     * Example: foo
     */
    name: string;
    /**
     * Creation source
     */
    source: InstanceSource;
    /**
     * Cloud instance type (AWS, GCP, Azure, ...) to emulate with limits
     * Example: t1.micro
     */
    instance_type: string;
    /**
     * Type (container or virtual-machine)
     * Example: container
     */
    type: InstanceType;
    /**
     * Whether to start the instance after creation
     * Example: true
     * API extension: instance_create_start
     */
    start: boolean;
}
/**
 * InstancesPut represents the fields available for a mass update.
 * swagger:model
 * API extension: instance_bulk_state_change.
 */
export interface InstancesPut {
    /**
     * Desired runtime state
     */
    state?: InstanceStatePut;
}
/**
 * InstancePost represents the fields required to rename/move an instance.
 * swagger:model
 * API extension: instances.
 */
export interface InstancePost {
    /**
     * New name for the instance
     * Example: bar
     */
    name: string;
    /**
     * Whether the instance is being migrated to another server
     * Example: false
     */
    migration: boolean;
    /**
     * Whether to perform a live migration (migration only)
     * Example: false
     */
    live: boolean;
    /**
     * Whether snapshots should be discarded (migration only)
     * Example: false
     */
    instance_only: boolean;
    /**
     * Target for the migration, will use pull mode if not set (migration only)
     */
    target?: InstancePostTarget;
    /**
     * Target pool for local cross-pool move
     * Example: baz
     * API extension: instance_pool_move
     */
    pool: string;
    /**
     * Target project for local cross-project move
     * Example: foo
     * API extension: instance_project_move
     */
    project: string;
    /**
     * AllowInconsistent allow inconsistent copies when migrating.
     * Example: false
     * API extension: instance_allow_inconsistent_copy
     */
    allow_inconsistent: boolean;
    /**
     * Instance configuration file.
     * Example: {"security.nesting": "true"}
     * API extension: instance_move_config
     */
    Config: { [key: string]: string};
    /**
     * Instance devices.
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}}
     * API extension: instance_move_config
     */
    Devices: { [key: string]: { [key: string]: string}};
    /**
     * List of profiles applied to the instance.
     * Example: ["default"]
     * API extension: instance_move_config
     */
    Profiles: string[];
}
/**
 * InstancePostTarget represents the migration target host and operation.
 * swagger:model
 * API extension: instances.
 */
export interface InstancePostTarget {
    /**
     * The certificate of the migration target
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * The operation URL on the remote target
     * Example: https://1.2.3.4:8443/1.0/operations/5e8e1638-5345-4c2d-bac9-2c79c8577292
     */
    operation?: string;
    /**
     * Migration websockets credentials
     * Example: {"migration": "random-string", "criu": "random-string"}
     */
    secrets?: { [key: string]: string};
}
/**
 * InstancePut represents the modifiable fields of an instance.
 * swagger:model
 * API extension: instances.
 */
export interface InstancePut {
    /**
     * Architecture name
     * Example: x86_64
     */
    architecture: string;
    /**
     * Instance configuration (see doc/instances.md)
     * Example: {"security.nesting": "true"}
     */
    config: { [key: string]: string};
    /**
     * Instance devices (see doc/instances.md)
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}}
     */
    devices: { [key: string]: { [key: string]: string}};
    /**
     * Whether the instance is ephemeral (deleted on shutdown)
     * Example: false
     */
    ephemeral: boolean;
    /**
     * List of profiles applied to the instance
     * Example: ["default"]
     */
    profiles: string[];
    /**
     * If set, instance will be restored to the provided snapshot name
     * Example: snap0
     */
    restore?: string;
    /**
     * Whether the instance currently has saved state on disk
     * Example: false
     */
    stateful: boolean;
    /**
     * Instance description
     * Example: My test instance
     */
    description: string;
}
/**
 * InstanceRebuildPost indicates how to rebuild an instance.
 * swagger:model
 * API extension: instances_rebuild.
 */
export interface InstanceRebuildPost {
    /**
     * Rebuild source
     */
    source: InstanceSource;
}
/**
 * Instance represents an instance.
 * swagger:model
 * API extension: instances.
 */
export interface Instance {
    InstancePut: InstancePut;
    /**
     * Instance creation timestamp
     * Example: 2021-03-23T20:00:00-04:00
     */
    created_at: string;
    /**
     * Expanded configuration (all profiles and local config merged)
     * Example: {"security.nesting": "true"}
     */
    expanded_config?: { [key: string]: string};
    /**
     * Expanded devices (all profiles and local devices merged)
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}}
     */
    expanded_devices?: { [key: string]: { [key: string]: string}};
    /**
     * Instance name
     * Example: foo
     */
    name: string;
    /**
     * Instance status (see instance_state)
     * Example: Running
     */
    status: string;
    /**
     * Instance status code (see instance_state)
     * Example: 101
     */
    status_code: StatusCode;
    /**
     * Last start timestamp
     * Example: 2021-03-23T20:00:00-04:00
     */
    last_used_at: string;
    /**
     * What cluster member this instance is located on
     * Example: server01
     */
    location: string;
    /**
     * The type of instance (container or virtual-machine)
     * Example: container
     */
    type: string;
    /**
     * Instance project name
     * Example: foo
     * API extension: instance_all_projects
     */
    project: string;
}
/**
 * InstanceFull is a combination of Instance, InstanceBackup, InstanceState and InstanceSnapshot.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceFull {
    Instance: Instance;
    /**
     * List of backups.
     */
    backups: InstanceBackup[];
    /**
     * Current state.
     */
    state?: InstanceState;
    /**
     * List of snapshots.
     */
    snapshots: InstanceSnapshot[];
}
/**
 * InstanceSource represents the creation source for a new instance.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceSource {
    /**
     * Source type
     * Example: image
     */
    type: string;
    /**
     * Certificate (for remote images or migration)
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * Image alias name (for image source)
     * Example: ubuntu/22.04
     */
    alias?: string;
    /**
     * Image fingerprint (for image source)
     * Example: ed56997f7c5b48e8d78986d2467a26109be6fb9f2d92e8c7b08eb8b6cec7629a
     */
    fingerprint?: string;
    /**
     * Image filters (for image source)
     * Example: {"os": "Ubuntu", "release": "jammy", "variant": "cloud"}
     */
    properties?: { [key: string]: string};
    /**
     * Remote server URL (for remote images)
     * Example: https://images.linuxcontainers.org
     */
    server?: string;
    /**
     * Remote server secret (for remote private images)
     * Example: RANDOM-STRING
     */
    secret?: string;
    /**
     * Protocol name (for remote image)
     * Example: simplestreams
     */
    protocol?: string;
    /**
     * Base image fingerprint (for faster migration)
     * Example: ed56997f7c5b48e8d78986d2467a26109be6fb9f2d92e8c7b08eb8b6cec7629a
     */
    'base-image'?: string;
    /**
     * Whether to use pull or push mode (for migration)
     * Example: pull
     */
    mode?: string;
    /**
     * Remote operation URL (for migration)
     * Example: https://1.2.3.4:8443/1.0/operations/1721ae08-b6a8-416a-9614-3f89302466e1
     */
    operation?: string;
    /**
     * Map of migration websockets (for migration)
     * Example: {"criu": "RANDOM-STRING", "rsync": "RANDOM-STRING"}
     */
    secrets?: { [key: string]: string};
    /**
     * Existing instance name or snapshot (for copy)
     * Example: foo/snap0
     */
    source?: string;
    /**
     * Whether this is a live migration (for migration)
     * Example: false
     */
    live?: boolean;
    /**
     * Whether the copy should skip the snapshots (for copy)
     * Example: false
     */
    instance_only?: boolean;
    /**
     * Whether this is refreshing an existing instance (for migration and copy)
     * Example: false
     */
    refresh?: boolean;
    /**
     * Whether to exclude source snapshots earlier than latest target snapshot
     * Example: false
     * API extension: custom_volume_refresh_exclude_older_snapshots
     */
    refresh_exclude_older?: boolean;
    /**
     * Source project name (for copy and local image)
     * Example: blah
     */
    project?: string;
    /**
     * Whether to ignore errors when copying (e.g. for volatile files)
     * Example: false
     * API extension: instance_allow_inconsistent_copy
     */
    allow_inconsistent: boolean;
}

//////////
// source: instance_backup.go

/**
 * BackupTarget represents the target storage server for an instance or volume backup.
 * swagger:model
 * API extension: backup_s3_upload.
 */
export interface BackupTarget {
    /**
     * Protocol is the upload protocol.
     * Example: S3
     */
    protocol: string;
    /**
     * URL is the HTTPS URL for the backup
     * Example: https://storage.googleapis.com
     */
    url: string;
    /**
     * BucketName is the name of the S3 bucket.
     * Example: my_bucket
     */
    bucket_name: string;
    /**
     * Path is the target path.
     * Example: foo/test.tar
     */
    path: string;
    /**
     * AccessKey is the S3 API access key
     * Example: GOOG1234
     */
    access_key: string;
    /**
     * SecretKey is the S3 API access key
     * Example: secret123
     */
    secret_key: string;
}
/**
 * InstanceBackupsPost represents the fields available for a new instance backup.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceBackupsPost {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * Whether to ignore snapshots
     * Example: false
     */
    instance_only: boolean;
    /**
     * Whether to use a pool-optimized binary format (instead of plain tarball)
     * Example: true
     */
    optimized_storage: boolean;
    /**
     * What compression algorithm to use
     * Example: gzip
     * API extension: backup_compression_algorithm
     */
    compression_algorithm: string;
    /**
     * External upload target
     * The backup will be uploaded and then deleted from local storage.
     * API extension: backup_s3_upload
     */
    target?: BackupTarget;
}
/**
 * InstanceBackup represents an instance backup.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceBackup {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup was created
     * Example: 2021-03-23T16:38:37.753398689-04:00
     */
    created_at: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * Whether to ignore snapshots
     * Example: false
     */
    instance_only: boolean;
    /**
     * Whether to use a pool-optimized binary format (instead of plain tarball)
     * Example: true
     */
    optimized_storage: boolean;
}
/**
 * InstanceBackupPost represents the fields available for the renaming of a instance backup.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceBackupPost {
    /**
     * New backup name
     * Example: backup1
     */
    name: string;
}

//////////
// source: instance_console.go

/**
 * InstanceConsoleControl represents a message on the instance console "control" socket.
 * API extension: instances.
 */
export interface InstanceConsoleControl {
    command: string;
    args: { [key: string]: string};
}
/**
 * InstanceConsolePost represents an instance console request.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceConsolePost {
    /**
     * Console width in columns (console type only)
     * Example: 80
     */
    width: number /* int */;
    /**
     * Console height in rows (console type only)
     * Example: 24
     */
    height: number /* int */;
    /**
     * Type of console to attach to (console or vga)
     * Example: console
     * API extension: console_vga_type
     */
    type: string;
    /**
     * Forces a connection to the console
     * Example: true
     * API extension: console_force
     */
    force: boolean;
}

//////////
// source: instance_exec.go

/**
 * InstanceExecControl represents a message on the instance exec "control" socket.
 * API extension: instances.
 */
export interface InstanceExecControl {
    command: string;
    args: { [key: string]: string};
    signal: number /* int */;
}
/**
 * InstanceExecPost represents an instance exec request.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceExecPost {
    /**
     * Command and its arguments
     * Example: ["bash"]
     */
    command: string[];
    /**
     * Whether to wait for all websockets to be connected before spawning the command
     * Example: true
     */
    'wait-for-websocket': boolean;
    /**
     * Whether the command is to be spawned in interactive mode (singled PTY instead of 3 PIPEs)
     * Example: true
     */
    interactive: boolean;
    /**
     * Additional environment to pass to the command
     * Example: {"FOO": "BAR"}
     */
    environment: { [key: string]: string};
    /**
     * Terminal width in characters (for interactive)
     * Example: 80
     */
    width: number /* int */;
    /**
     * Terminal height in rows (for interactive)
     * Example: 24
     */
    height: number /* int */;
    /**
     * Whether to capture the output for later download (requires non-interactive)
     */
    'record-output': boolean;
    /**
     * UID of the user to spawn the command as
     * Example: 1000
     */
    user: number /* uint32 */;
    /**
     * GID of the user to spawn the command as
     * Example: 1000
     */
    group: number /* uint32 */;
    /**
     * Current working directory for the command
     * Example: /home/foo/
     */
    cwd: string;
}

//////////
// source: instance_snapshot.go

/**
 * InstanceSnapshotsPost represents the fields available for a new instance snapshot.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceSnapshotsPost {
    /**
     * Snapshot name
     * Example: snap0
     */
    name: string;
    /**
     * Whether the snapshot should include runtime state
     * Example: false
     */
    stateful: boolean;
    /**
     * When the snapshot expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     * API extension: snapshot_expiry_creation
     */
    expires_at?: string;
}
/**
 * InstanceSnapshotPost represents the fields required to rename/move an instance snapshot.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceSnapshotPost {
    /**
     * New name for the snapshot
     * Example: foo
     */
    name: string;
    /**
     * Whether this is a migration request
     * Example: false
     */
    migration: boolean;
    /**
     * Migration target for push migration (requires migration)
     */
    target?: InstancePostTarget;
    /**
     * Whether to perform a live migration (requires migration)
     * Example: false
     */
    live?: boolean;
}
/**
 * InstanceSnapshotPut represents the modifiable fields of an instance snapshot.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceSnapshotPut {
    /**
     * When the snapshot expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
}
/**
 * InstanceSnapshot represents an instance snapshot.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceSnapshot {
    InstanceSnapshotPut: InstanceSnapshotPut;
    /**
     * Architecture name
     * Example: x86_64
     */
    architecture: string;
    /**
     * Instance configuration (see doc/instances.md)
     * Example: {"security.nesting": "true"}
     */
    config: { [key: string]: string};
    /**
     * Instance creation timestamp
     * Example: 2021-03-23T20:00:00-04:00
     */
    created_at: string;
    /**
     * Instance devices (see doc/instances.md)
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}}
     */
    devices: { [key: string]: { [key: string]: string}};
    /**
     * Whether the instance is ephemeral (deleted on shutdown)
     * Example: false
     */
    ephemeral: boolean;
    /**
     * Expanded configuration (all profiles and local config merged)
     * Example: {"security.nesting": "true"}
     */
    expanded_config?: { [key: string]: string};
    /**
     * Expanded devices (all profiles and local devices merged)
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}}
     */
    expanded_devices?: { [key: string]: { [key: string]: string}};
    /**
     * Last start timestamp
     * Example: 2021-03-23T20:00:00-04:00
     */
    last_used_at: string;
    /**
     * Snapshot name
     * Example: foo
     */
    name: string;
    /**
     * List of profiles applied to the instance
     * Example: ["default"]
     */
    profiles: string[];
    /**
     * Whether the instance currently has saved state on disk
     * Example: false
     */
    stateful: boolean;
    /**
     * Size of the snapshot in bytes
     * Example: 143360
     * API extension: snapshot_disk_usage
     */
    size: number /* int64 */;
}

//////////
// source: instance_state.go

/**
 * InstanceStatePut represents the modifiable fields of an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStatePut {
    /**
     * State change action (start, stop, restart, freeze, unfreeze)
     * Example: start
     */
    action: string;
    /**
     * How long to wait (in s) before giving up (when force isn't set)
     * Example: 30
     */
    timeout: number /* int */;
    /**
     * Whether to force the action (for stop and restart)
     * Example: false
     */
    force: boolean;
    /**
     * Whether to store the runtime state (for stop)
     * Example: false
     */
    stateful: boolean;
}
/**
 * InstanceState represents an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceState {
    /**
     * Current status (Running, Stopped, Frozen or Error)
     * Example: Running
     */
    status: string;
    /**
     * Numeric status code (101, 102, 110, 112)
     * Example: 101
     */
    status_code: StatusCode;
    /**
     * Disk usage key/value pairs
     */
    disk: { [key: string]: InstanceStateDisk};
    /**
     * Memory usage information
     */
    memory: InstanceStateMemory;
    /**
     * Network usage key/value pairs
     */
    network: { [key: string]: InstanceStateNetwork};
    /**
     * PID of the runtime
     * Example: 7281
     */
    pid: number /* int64 */;
    /**
     * Number of processes in the instance
     * Example: 50
     */
    processes: number /* int64 */;
    /**
     * CPU usage information
     */
    cpu: InstanceStateCPU;
    /**
     * The time that the instance started at
     * API extension: instance_state_started_at.
     */
    started_at: string;
    /**
     * OS information.
     * API extension: instances_state_os_info.
     */
    os_info?: InstanceStateOSInfo;
}
/**
 * InstanceStateDisk represents the disk information section of an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateDisk {
    /**
     * Disk usage in bytes
     * Example: 502239232
     */
    usage: number /* int64 */;
    /**
     * Total size in bytes
     * Example: 502239232
     * API extension: instances_state_total
     */
    total: number /* int64 */;
}
/**
 * InstanceStateCPU represents the cpu information section of an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateCPU {
    /**
     * CPU usage in nanoseconds
     * Example: 3637691016
     */
    usage: number /* int64 */;
    /**
     * CPU time available per second, in nanoseconds
     * Example: 4000000000
     * API extension: instance_state_cpu_time
     */
    allocated_time: number /* int64 */;
}
/**
 * InstanceStateMemory represents the memory information section of an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateMemory {
    /**
     * Memory usage in bytes
     * Example: 73248768
     */
    usage: number /* int64 */;
    /**
     * Peak memory usage in bytes
     * Example: 73785344
     */
    usage_peak: number /* int64 */;
    /**
     * Total memory size in bytes
     * Example: 12297557
     * API extension: instances_state_total
     */
    total: number /* int64 */;
    /**
     * SWAP usage in bytes
     * Example: 12297557
     */
    swap_usage: number /* int64 */;
    /**
     * Peak SWAP usage in bytes
     * Example: 12297557
     */
    swap_usage_peak: number /* int64 */;
}
/**
 * InstanceStateNetwork represents the network information section of an instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateNetwork {
    /**
     * List of IP addresses
     */
    addresses: InstanceStateNetworkAddress[];
    /**
     * Traffic counters
     */
    counters: InstanceStateNetworkCounters;
    /**
     * MAC address
     * Example: 10:66:6a:0c:ee:dd
     */
    hwaddr: string;
    /**
     * Name of the interface on the host
     * Example: vethbbcd39c7
     */
    host_name: string;
    /**
     * MTU (maximum transmit unit) for the interface
     * Example: 1500
     */
    mtu: number /* int */;
    /**
     * Administrative state of the interface (up/down)
     * Example: up
     */
    state: string;
    /**
     * Type of interface (broadcast, loopback, point-to-point, ...)
     * Example: broadcast
     */
    type: string;
}
/**
 * InstanceStateNetworkAddress represents a network address as part of the network section of an
 * instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateNetworkAddress {
    /**
     * Network family (inet or inet6)
     * Example: inet6
     */
    family: string;
    /**
     * IP address
     * Example: fd42:4c81:5770:1eaf:1266:6aff:fe0c:eedd
     */
    address: string;
    /**
     * Network mask
     * Example: 64
     */
    netmask: string;
    /**
     * Address scope (local, link or global)
     * Example: global
     */
    scope: string;
}
/**
 * InstanceStateNetworkCounters represents packet counters as part of the network section of an
 * instance's state.
 * swagger:model
 * API extension: instances.
 */
export interface InstanceStateNetworkCounters {
    /**
     * Number of bytes received
     * Example: 192021
     */
    bytes_received: number /* int64 */;
    /**
     * Number of bytes sent
     * Example: 10888579
     */
    bytes_sent: number /* int64 */;
    /**
     * Number of packets received
     * Example: 1748
     */
    packets_received: number /* int64 */;
    /**
     * Number of packets sent
     * Example: 964
     */
    packets_sent: number /* int64 */;
    /**
     * Number of errors received
     * Example: 14
     */
    errors_received: number /* int64 */;
    /**
     * Number of errors sent
     * Example: 41
     */
    errors_sent: number /* int64 */;
    /**
     * Number of outbound packets dropped
     * Example: 541
     */
    packets_dropped_outbound: number /* int64 */;
    /**
     * Number of inbound packets dropped
     * Example: 179
     */
    packets_dropped_inbound: number /* int64 */;
}
/**
 * InstanceStateOSInfo represents the operating system information section of an instance's state.
 * swagger:model
 * API extension: instances_state_os_info.
 */
export interface InstanceStateOSInfo {
    /**
     * Operating system running in the instance.
     * Example: Debian GNU/Linux
     */
    os: string;
    /**
     * Version of the operating system.
     * Example: 12 (bookworm)
     */
    os_version: string;
    /**
     * Version of the kernel running in the instance.
     * Example: 6.1.0-25-amd64
     */
    kernel_version: string;
    /**
     * Hostname of the instance.
     * Example: myhost
     */
    hostname: string;
    /**
     * FQDN of the instance.
     * Example: myhost.mydomain.local
     */
    fqdn: string;
}

//////////
// source: metadata.go

/**
 * MetadataConfiguration represents a server's exposed configuration metadata
 * swagger:model
 * API extension: metadata_configuration.
 */
export interface MetadataConfiguration {
    /**
     * Metadata about configuration keys.
     * Example: {'configs': {'instance': {...}}}
     */
    configs: MetadataConfig;
}
/**
 * MetadataConfig repreents metadata about configuration keys
 * swagger:model
 * API extension: metadata_configuration.
 */
export type MetadataConfig = { [key: MetadataConfigEntityName]: { [key: MetadataConfigGroupName]: MetadataConfigGroup}};
/**
 * MetadataConfigEntityName represents a main API object type
 * Example: instance
 * swagger:model
 * API extension: metadata_configuration.
 */
export type MetadataConfigEntityName = string;
/**
 * MetadataConfigGroupName represents the name of a group of config keys
 * Example: volatile
 * swagger:model
 * API extension: metadata_configuration.
 */
export type MetadataConfigGroupName = string;
/**
 * MetadataConfigGroup represents a group of config keys
 * swagger:model
 * API extension: metadata_configuration.
 */
export interface MetadataConfigGroup {
    keys: { [key: string]: MetadataConfigKey}[];
}
/**
 * MetadataConfigKey describe a configuration key
 * swagger:model
 * API extension: metadata_configuration.
 */
export interface MetadataConfigKey {
    /**
     * Condition specifies the condition that must be met for the option to be taken into account
     * Example: container
     */
    condition?: string;
    /**
     * Scope defines if option apply to cluster or to the local server
     * Example: global
     */
    scope?: string;
    /**
     * Type specifies the type of the option
     * Example: string
     */
    type: string;
    /**
     * DefaultDesc specify default value for configuration
     * Example: "`DHCP on eth0`"
     */
    defaultdesc?: string;
    /**
     * LiveUpdate specifies whether the server must be restarted for the option to be updated
     * Example: "no"
     */
    liveupdate?: string;
    /**
     * ShortDesc provides short description for the configuration
     * Example: "Kernel modules to load before starting the instance"
     */
    shortdesc: string;
    /**
     * LongDesc provides long description for the option
     * Example: "Specify the kernel modules as a comma-separated list."
     */
    longdesc: string;
}

//////////
// source: migration.go

/**
 * SecretNameControl is the secret name used for the migration control connection.
 */
export const SecretNameControl = "control";
/**
 * SecretNameFilesystem is the secret name used for the migration filesystem connection.
 */
export const SecretNameFilesystem = "fs";
/**
 * SecretNameState is the secret name used for the migration state connection.
 */
export const SecretNameState = "criu"; // Legacy value used for backward compatibility for clients.

//////////
// source: network.go

/**
 * NetworksPost represents the fields of a new network
 * swagger:model
 * API extension: network.
 */
export interface NetworksPost {
    NetworkPut: NetworkPut;
    /**
     * The name of the new network
     * Example: mybr1
     */
    name: string;
    /**
     * The network type (refer to doc/networks.md)
     * Example: bridge
     */
    type: string;
}
/**
 * NetworkPost represents the fields required to rename a network
 * swagger:model
 * API extension: network.
 */
export interface NetworkPost {
    /**
     * The new name for the network
     * Example: mybr1
     */
    name: string;
}
/**
 * NetworkPut represents the modifiable fields of a network
 * swagger:model
 * API extension: network.
 */
export interface NetworkPut {
    /**
     * Network configuration map (refer to doc/networks.md)
     * Example: {"ipv4.address": "10.0.0.1/24", "ipv4.nat": "true", "ipv6.address": "none"}
     */
    config: { [key: string]: string};
    /**
     * Description of the profile
     * Example: My new bridge
     * API extension: entity_description
     */
    description: string;
}
/**
 * NetworkStatusPending network is pending creation on other cluster nodes.
 */
export const NetworkStatusPending = "Pending";
/**
 * NetworkStatusCreated network is fully created.
 */
export const NetworkStatusCreated = "Created";
/**
 * NetworkStatusErrored network is in error status.
 */
export const NetworkStatusErrored = "Errored";
/**
 * NetworkStatusUnknown network is in unknown status.
 */
export const NetworkStatusUnknown = "Unknown";
/**
 * NetworkStatusUnavailable network failed to initialize.
 */
export const NetworkStatusUnavailable = "Unavailable";
/**
 * Network represents a network
 * swagger:model
 */
export interface Network {
    NetworkPut: NetworkPut;
    /**
     * The network name
     * Read only: true
     * Example: mybr0
     */
    name: string;
    /**
     * The network type
     * Read only: true
     * Example: bridge
     */
    type: string;
    /**
     * List of URLs of objects using this profile
     * Read only: true
     * Example: ["/1.0/profiles/default", "/1.0/instances/c1"]
     */
    used_by: string[];
    /**
     * Whether this is a managed network
     * Read only: true
     * Example: true
     * API extension: network
     */
    managed: boolean;
    /**
     * The state of the network (for managed network in clusters)
     * Read only: true
     * Example: Created
     * API extension: clustering
     */
    status: string;
    /**
     * Cluster members on which the network has been defined
     * Read only: true
     * Example: ["server01", "server02", "server03"]
     * API extension: clustering
     */
    locations: string[];
    /**
     * Project name
     * Example: project1
     * API extension: networks_all_projects
     */
    project: string;
}
/**
 * NetworkLease represents a DHCP lease
 * swagger:model
 * API extension: network_leases.
 */
export interface NetworkLease {
    /**
     * The hostname associated with the record
     * Example: c1
     */
    hostname: string;
    /**
     * The MAC address
     * Example: 10:66:6a:2c:89:d9
     */
    hwaddr: string;
    /**
     * The IP address
     * Example: 10.0.0.98
     */
    address: string;
    /**
     * The type of record (static or dynamic)
     * Example: dynamic
     */
    type: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     * API extension: network_leases_location
     */
    location: string;
}
/**
 * NetworkState represents the network state
 * swagger:model
 */
export interface NetworkState {
    /**
     * List of addresses
     */
    addresses: NetworkStateAddress[];
    /**
     * Interface counters
     */
    counters?: NetworkStateCounters;
    /**
     * MAC address
     * Example: 10:66:6a:5a:83:57
     */
    hwaddr: string;
    /**
     * MTU
     * Example: 1500
     */
    mtu: number /* int */;
    /**
     * Link state
     * Example: up
     */
    state: string;
    /**
     * Interface type
     * Example: broadcast
     */
    type: string;
    /**
     * Additional bond interface information
     * API extension: network_state_bond_bridge
     */
    bond?: NetworkStateBond;
    /**
     * Additional bridge interface information
     * API extension: network_state_bond_bridge
     */
    bridge?: NetworkStateBridge;
    /**
     * Additional vlan interface information
     * API extension: network_state_vlan
     */
    vlan?: NetworkStateVLAN;
    /**
     * Additional OVN network information
     * API extension: network_state_ovn
     */
    ovn?: NetworkStateOVN;
}
/**
 * NetworkStateAddress represents a network address
 * swagger:model
 */
export interface NetworkStateAddress {
    /**
     * Address family
     * Example: inet
     */
    family: string;
    /**
     * IP address
     * Example: 10.0.0.1
     */
    address: string;
    /**
     * IP netmask (CIDR)
     * Example: 24
     */
    netmask: string;
    /**
     * Address scope
     * Example: global
     */
    scope: string;
}
/**
 * NetworkStateCounters represents packet counters
 * swagger:model
 */
export interface NetworkStateCounters {
    /**
     * Number of bytes received
     * Example: 250542118
     */
    bytes_received: number /* int64 */;
    /**
     * Number of bytes sent
     * Example: 17524040140
     */
    bytes_sent: number /* int64 */;
    /**
     * Number of packets received
     * Example: 1182515
     */
    packets_received: number /* int64 */;
    /**
     * Number of packets sent
     * Example: 1567934
     */
    packets_sent: number /* int64 */;
}
/**
 * NetworkStateBond represents bond specific state
 * swagger:model
 * API extension: network_state_bond_bridge.
 */
export interface NetworkStateBond {
    /**
     * Bonding mode
     * Example: 802.3ad
     */
    mode: string;
    /**
     * Transmit balancing policy
     * Example: layer3+4
     */
    transmit_policy: string;
    /**
     * Delay on link up (ms)
     * Example: 0
     */
    up_delay: number /* uint64 */;
    /**
     * Delay on link down (ms)
     * Example: 0
     */
    down_delay: number /* uint64 */;
    /**
     * How often to check for link state (ms)
     * Example: 100
     */
    mii_frequency: number /* uint64 */;
    /**
     * Bond link state
     * Example: up
     */
    mii_state: string;
    /**
     * List of devices that are part of the bond
     * Example: ["eth0", "eth1"]
     */
    lower_devices: string[];
}
/**
 * NetworkStateBridge represents bridge specific state
 * swagger:model
 * API extension: network_state_bond_bridge.
 */
export interface NetworkStateBridge {
    /**
     * Bridge ID
     * Example: 8000.0a0f7c6edbd9
     */
    id: string;
    /**
     * Whether STP is enabled
     * Example: false
     */
    stp: boolean;
    /**
     * Delay on port join (ms)
     * Example: 1500
     */
    forward_delay: number /* uint64 */;
    /**
     * Default VLAN ID
     * Example: 1
     */
    vlan_default: number /* uint64 */;
    /**
     * Whether VLAN filtering is enabled
     * Example: false
     */
    vlan_filtering: boolean;
    /**
     * List of devices that are in the bridge
     * Example: ["eth0", "eth1"]
     */
    upper_devices: string[];
}
/**
 * NetworkStateVLAN represents VLAN specific state
 * swagger:model
 * API extension: network_state_vlan.
 */
export interface NetworkStateVLAN {
    /**
     * Parent device
     * Example: eth0
     */
    lower_device: string;
    /**
     * VLAN ID
     * Example: 100
     */
    vid: number /* uint64 */;
}
/**
 * NetworkStateOVN represents OVN specific state
 * swagger:model
 * API extension: network_state_ovn.
 */
export interface NetworkStateOVN {
    /**
     * OVN network chassis name
     * Example: server01
     */
    chassis: string;
    /**
     * OVN logical router name
     * Example: incus-net1-lr
     * API extension: network_state_ovn_lr
     */
    logical_router: string;
    /**
     * OVN logical switch name
     * Example: incus-net1-ls-int
     * API extension: network_state_ovn_ls
     */
    logical_switch: string;
    /**
     * OVN network uplink ipv4 address
     * Example: 10.0.0.1
     * API extension: network_ovn_state_addresses
     */
    uplink_ipv4: string;
    /**
     * OVN network uplink ipv6 address
     * Example: 2001:0000:130F:0000:0000:09C0:876A:130B.
     * API extension: network_ovn_state_addresses
     */
    uplink_ipv6: string;
}

//////////
// source: network_acl.go

/**
 * NetworkACLRule represents a single rule in an ACL ruleset.
 * Refer to doc/network-acls.md for details.
 * swagger:model
 * API extension: network_acl.
 */
export interface NetworkACLRule {
    /**
     * Action to perform on rule match
     * Example: allow
     */
    action: string;
    /**
     * Source address
     * Example: @internal
     */
    source?: string;
    /**
     * Destination address
     * Example: 8.8.8.8/32,8.8.4.4/32
     */
    destination?: string;
    /**
     * Protocol
     * Example: udp
     */
    protocol?: string;
    /**
     * Source port
     * Example: 1234
     */
    source_port?: string;
    /**
     * Destination port
     * Example: 53
     */
    destination_port?: string;
    /**
     * Type of ICMP message (for ICMP protocol)
     * Example: 8
     */
    icmp_type?: string;
    /**
     * ICMP message code (for ICMP protocol)
     * Example: 0
     */
    icmp_code?: string;
    /**
     * Description of the rule
     * Example: Allow DNS queries to Google DNS
     */
    description?: string;
    /**
     * State of the rule
     * Example: enabled
     */
    state: string;
}
/**
 * NetworkACLPost used for renaming an ACL.
 * swagger:model
 * API extension: network_acl.
 */
export interface NetworkACLPost {
    /**
     * The new name for the ACL
     * Example: bar
     */
    name: string; // Name of ACL.
}
/**
 * NetworkACLPut used for updating an ACL.
 * swagger:model
 * API extension: network_acl.
 */
export interface NetworkACLPut {
    /**
     * Description of the ACL
     * Example: Web servers
     */
    description: string;
    /**
     * List of egress rules (order independent)
     */
    egress: NetworkACLRule[];
    /**
     * List of ingress rules (order independent)
     */
    ingress: NetworkACLRule[];
    /**
     * ACL configuration map (refer to doc/network-acls.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
}
/**
 * NetworkACL used for displaying an ACL.
 * swagger:model
 * API extension: network_acl.
 */
export interface NetworkACL {
    NetworkACLPost: NetworkACLPost;
    NetworkACLPut: NetworkACLPut;
    /**
     * List of URLs of objects using this profile
     * Read only: true
     * Example: ["/1.0/instances/c1", "/1.0/instances/v1", "/1.0/networks/mybr0"]
     */
    used_by: string[]; // Resources that use the ACL.
    /**
     * Project name
     * Example: project1
     * API extension: network_acls_all_projects
     */
    project: string; // Project the ACL belongs to.
}
/**
 * NetworkACLsPost used for creating an ACL.
 * swagger:model
 * API extension: network_acl.
 */
export interface NetworkACLsPost {
    NetworkACLPost: NetworkACLPost;
    NetworkACLPut: NetworkACLPut;
}

//////////
// source: network_address_set.go

/**
 * NetworkAddressSetPost used for renaming an address set.
 * swagger:model
 * API extension: network_address_set.
 */
export interface NetworkAddressSetPost {
    /**
     * The new name of the address set
     * Example: "bar"
     */
    name: string;
}
/**
 * NetworkAddressSetPut used for updating an address set.
 * swagger:model
 * API extension: network_address_set.
 */
export interface NetworkAddressSetPut {
    /**
     * List of addresses in the set
     * Example: ["192.0.0.1", "2001:0db8:1234::1"]
     */
    addresses: string[];
    /**
     * Address set configuration map (refer to doc/network-address-sets.md)
     * Example: {"user.mykey": "foo"}
     */
    config?: { [key: string]: string};
    /**
     * Description of the address set
     * Example: Web servers
     */
    description: string;
}
/**
 * NetworkAddressSetsPost used for creating a new address set.
 * swagger:model
 * API extension: network_address_set.
 */
export interface NetworkAddressSetsPost {
    NetworkAddressSetPut: NetworkAddressSetPut;
    NetworkAddressSetPost: NetworkAddressSetPost;
}
/**
 * NetworkAddressSet represents an address set.
 * Refer to doc/howto/network_address_sets.md for details.
 * swagger:model
 * API extension: network_address_set.
 */
export interface NetworkAddressSet {
    NetworkAddressSetPut: NetworkAddressSetPut;
    NetworkAddressSetPost: NetworkAddressSetPost;
    /**
     * List of URLs of objects using this profile
     * Read only: true
     * Example: ["/1.0/network-acls/foo", "/1.0/network-acls/bar", "/1.0/network-acls/baz"]
     */
    used_by: string[];
    /**
     * Project name
     * Example: project1
     */
    project: string;
}

//////////
// source: network_allocation.go

/**
 * NetworkAllocations used for displaying network addresses used by a consuming entity
 * e.g, instance, network forward, load-balancer, network...
 * swagger:model
 * API extension: network_allocations.
 */
export interface NetworkAllocations {
    /**
     * The network address of the allocation (in CIDR format)
     * Example: 192.0.2.1/24
     */
    addresses: string;
    /**
     * Hwaddr is the MAC address of the entity consuming the network address
     */
    hwaddr: string;
    /**
     * Whether the entity comes from a network that performs egress source NAT
     */
    nat: boolean;
    /**
     * Type of the entity consuming the network address
     */
    type: string;
    /**
     * Name of the entity consuming the network address
     */
    used_by: string;
}

//////////
// source: network_forward.go

/**
 * NetworkForwardPort represents a port specification in a network address forward
 * swagger:model
 * API extension: network_forward.
 */
export interface NetworkForwardPort {
    /**
     * Description of the forward port
     * Example: My web server forward
     */
    description: string;
    /**
     * Protocol for port forward (either tcp or udp)
     * Example: tcp
     */
    protocol: string;
    /**
     * ListenPort(s) to forward (comma delimited ranges)
     * Example: 80,81,8080-8090
     */
    listen_port: string;
    /**
     * TargetPort(s) to forward ListenPorts to (allows for many-to-one)
     * Example: 80,81,8080-8090
     */
    target_port: string;
    /**
     * TargetAddress to forward ListenPorts to
     * Example: 198.51.100.2
     */
    target_address: string;
    /**
     * SNAT controls whether to apply a matching SNAT rule to new outgoing traffic from the target
     * Example: false
     * API extension: network_forward_snat
     */
    snat: boolean;
}
/**
 * NetworkForwardsPost represents the fields of a new network address forward
 * swagger:model
 * API extension: network_forward.
 */
export interface NetworkForwardsPost {
    NetworkForwardPut: NetworkForwardPut;
    /**
     * The listen address of the forward
     * Example: 192.0.2.1
     */
    listen_address: string;
}
/**
 * NetworkForwardPut represents the modifiable fields of a network address forward
 * swagger:model
 * API extension: network_forward.
 */
export interface NetworkForwardPut {
    /**
     * Description of the forward listen IP
     * Example: My public IP forward
     */
    description: string;
    /**
     * Forward configuration map (refer to doc/network-forwards.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
    /**
     * Port forwards (optional)
     */
    ports: NetworkForwardPort[];
}
/**
 * NetworkForward used for displaying an network address forward.
 * swagger:model
 * API extension: network_forward.
 */
export interface NetworkForward {
    NetworkForwardPut: NetworkForwardPut;
    /**
     * The listen address of the forward
     * Example: 192.0.2.1
     */
    listen_address: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     */
    location: string;
}

//////////
// source: network_integration.go

/**
 * NetworkIntegrationsPost represents the fields of a new network integration
 * swagger:model
 * API extension: network_integrations.
 */
export interface NetworkIntegrationsPost {
    NetworkIntegrationPut: NetworkIntegrationPut;
    /**
     * The name of the integration
     * Example: region1
     */
    name: string;
    /**
     * The type of integration
     * Example: ovn
     */
    type: string;
}
/**
 * NetworkIntegrationPut represents the modifiable fields of a network integration
 * swagger:model
 * API extension: network_integrations.
 */
export interface NetworkIntegrationPut {
    /**
     * Description of the network integration
     * Example: OVN interconnection for region1
     */
    description: string;
    /**
     * Integration configuration map (refer to doc/network-integrations.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
}
/**
 * NetworkIntegration represents a network integration.
 * swagger:model
 * API extension: network_integrations.
 */
export interface NetworkIntegration {
    NetworkIntegrationPut: NetworkIntegrationPut;
    /**
     * The name of the integration
     * Example: region1
     */
    name: string;
    /**
     * The type of integration
     * Example: ovn
     */
    type: string;
    /**
     * List of URLs of objects using this network integration
     * Read only: true
     * Example: ["/1.0/networks/foo", "/1.0/networks/bar"]
     */
    used_by: string[]; // Resources that use the integration.
}
/**
 * NetworkIntegrationPost represents the fields required to rename a network integration
 * swagger:model
 * API extension: network_integrations.
 */
export interface NetworkIntegrationPost {
    /**
     * The new name for the network integration
     * Example: region2
     */
    name: string;
}

//////////
// source: network_load_balancer.go

/**
 * NetworkLoadBalancerBackend represents a target backend specification in a network load balancer
 * swagger:model
 * API extension: network_load_balancer.
 */
export interface NetworkLoadBalancerBackend {
    /**
     * Name of the load balancer backend
     * Example: c1-http
     */
    name: string;
    /**
     * Description of the load balancer backend
     * Example: C1 webserver
     */
    description: string;
    /**
     * TargetPort(s) to forward ListenPorts to (allows for many-to-one)
     * Example: 80,81,8080-8090
     */
    target_port: string;
    /**
     * TargetAddress to forward ListenPorts to
     * Example: 198.51.100.2
     */
    target_address: string;
}
/**
 * NetworkLoadBalancerPort represents a port specification in a network load balancer
 * swagger:model
 * API extension: network_load_balancer.
 */
export interface NetworkLoadBalancerPort {
    /**
     * Description of the load balancer port
     * Example: My web server load balancer
     */
    description: string;
    /**
     * Protocol for load balancer port (either tcp or udp)
     * Example: tcp
     */
    protocol: string;
    /**
     * ListenPort(s) of load balancer (comma delimited ranges)
     * Example: 80,81,8080-8090
     */
    listen_port: string;
    /**
     * TargetBackend backend names to load balance ListenPorts to
     * Example: ["c1-http","c2-http"]
     */
    target_backend: string[];
}
/**
 * NetworkLoadBalancersPost represents the fields of a new network load balancer
 * swagger:model
 * API extension: network_load_balancer.
 */
export interface NetworkLoadBalancersPost {
    NetworkLoadBalancerPut: NetworkLoadBalancerPut;
    /**
     * The listen address of the load balancer
     * Example: 192.0.2.1
     */
    listen_address: string;
}
/**
 * NetworkLoadBalancerPut represents the modifiable fields of a network load balancer
 * swagger:model
 * API extension: network_load_balancer.
 */
export interface NetworkLoadBalancerPut {
    /**
     * Description of the load balancer listen IP
     * Example: My public IP load balancer
     */
    description: string;
    /**
     * Load balancer configuration map (refer to doc/network-load-balancers.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
    /**
     * Backends (optional)
     */
    backends: NetworkLoadBalancerBackend[];
    /**
     * Port forwards (optional)
     */
    ports: NetworkLoadBalancerPort[];
}
/**
 * NetworkLoadBalancer used for displaying a network load balancer
 * swagger:model
 * API extension: network_load_balancer.
 */
export interface NetworkLoadBalancer {
    NetworkLoadBalancerPut: NetworkLoadBalancerPut;
    /**
     * The listen address of the load balancer
     * Example: 192.0.2.1
     */
    listen_address: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     */
    location: string;
}
/**
 * NetworkLoadBalancerState is used for showing current state of a load balancer
 * swagger:model
 * API extension: network_load_balancer_state.
 */
export interface NetworkLoadBalancerState {
    backend_health: { [key: string]: NetworkLoadBalancerStateBackendHealth};
}
/**
 * NetworkLoadBalancerStateBackendHealth represents the health of a particular load-balancer backend
 * swagger:model
 * API extension: network_load_balancer_state.
 */
export interface NetworkLoadBalancerStateBackendHealth {
    address: string;
    ports: NetworkLoadBalancerStateBackendHealthPort[];
}
/**
 * NetworkLoadBalancerStateBackendHealthPort represents the health status of a particular load-balancer backend port.
 * swagger:model
 * API extension: network_load_balancer_state.
 */
export interface NetworkLoadBalancerStateBackendHealthPort {
    protocol: string;
    port: number /* int */;
    status: string;
}

//////////
// source: network_peer.go

/**
 * NetworkPeersPost represents the fields of a new network peering
 * swagger:model
 * API extension: network_peer.
 */
export interface NetworkPeersPost {
    NetworkPeerPut: NetworkPeerPut;
    /**
     * Name of the peer
     * Example: project1-network1
     */
    name: string;
    /**
     * Name of the target project
     * Example: project1
     */
    target_project?: string;
    /**
     * Name of the target network
     * Example: network1
     */
    target_network?: string;
    /**
     * Type of peer
     * Example: local
     * API extension: network_integrations.
     */
    type: string;
    /**
     * Name of the target integration
     * Example: ovn-ic1
     * API extension: network_integrations.
     */
    target_integration?: string;
}
/**
 * NetworkPeerPut represents the modifiable fields of a network peering
 * swagger:model
 * API extension: network_peer.
 */
export interface NetworkPeerPut {
    /**
     * Description of the peer
     * Example: Peering with network1 in project1
     */
    description: string;
    /**
     * Peer configuration map (refer to doc/network-peers.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
}
/**
 * NetworkPeer used for displaying a network peering.
 * swagger:model
 * API extension: network_forward.
 */
export interface NetworkPeer {
    NetworkPeerPut: NetworkPeerPut;
    /**
     * Name of the peer
     * Read only: true
     * Example: project1-network1
     */
    name: string;
    /**
     * Name of the target project
     * Read only: true
     * Example: project1
     */
    target_project?: string;
    /**
     * Name of the target network
     * Read only: true
     * Example: network1
     */
    target_network?: string;
    /**
     * The state of the peering
     * Read only: true
     * Example: Pending
     */
    status: string;
    /**
     * List of URLs of objects using this network peering
     * Read only: true
     * Example: ["/1.0/network-acls/test", "/1.0/network-acls/foo"]
     */
    used_by: string[];
    /**
     * Type of peer
     * Example: local
     * API extension: network_integrations.
     */
    type: string;
    /**
     * Name of the target integration
     * Example: ovn-ic1
     * API extension: network_integrations.
     */
    target_integration?: string;
}

//////////
// source: network_zone.go

/**
 * NetworkZonesPost represents the fields of a new network zone
 * swagger:model
 * API extension: network_dns.
 */
export interface NetworkZonesPost {
    NetworkZonePut: NetworkZonePut;
    /**
     * The name of the zone (DNS domain name)
     * Example: example.net
     */
    name: string;
}
/**
 * NetworkZonePut represents the modifiable fields of a network zone
 * swagger:model
 * API extension: network_dns.
 */
export interface NetworkZonePut {
    /**
     * Description of the network zone
     * Example: Internal domain
     */
    description: string;
    /**
     * Zone configuration map (refer to doc/network-zones.md)
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
}
/**
 * NetworkZone represents a network zone (DNS).
 * swagger:model
 * API extension: network_dns.
 */
export interface NetworkZone {
    NetworkZonePut: NetworkZonePut;
    /**
     * The name of the zone (DNS domain name)
     * Example: example.net
     */
    name: string;
    /**
     * List of URLs of objects using this network zone
     * Read only: true
     * Example: ["/1.0/networks/foo", "/1.0/networks/bar"]
     */
    used_by: string[]; // Resources that use the zone.
    /**
     * Project name
     * Example: project1
     * API extension: network_zones_all_projects
     */
    project: string;
}
/**
 * NetworkZoneRecordsPost represents the fields of a new network zone record
 * swagger:model
 * API extension: network_dns_records.
 */
export interface NetworkZoneRecordsPost {
    NetworkZoneRecordPut: NetworkZoneRecordPut;
    /**
     * The record name in the zone
     * Example: @
     */
    name: string;
}
/**
 * NetworkZoneRecordPut represents the modifiable fields of a network zone record
 * swagger:model
 * API extension: network_dns_records.
 */
export interface NetworkZoneRecordPut {
    /**
     * Description of the record
     * Example: SPF record
     */
    description: string;
    /**
     * Entries in the record
     */
    entries: NetworkZoneRecordEntry[];
    /**
     * Advanced configuration for the record
     * Example: {"user.mykey": "foo"}
     */
    config: { [key: string]: string};
}
/**
 * NetworkZoneRecordEntry represents the fields in a record entry
 * swagger:model
 * API extension: network_dns_records.
 */
export interface NetworkZoneRecordEntry {
    /**
     * Type of DNS entry
     * Example: TXT
     */
    type: string;
    /**
     * TTL for the entry
     * Example: 3600
     */
    ttl?: number /* uint64 */;
    /**
     * Value for the record
     * Example: v=spf1 mx ~all
     */
    value: string;
}
/**
 * NetworkZoneRecord represents a network zone (DNS) record.
 * swagger:model
 * API extension: network_dns_records.
 */
export interface NetworkZoneRecord {
    NetworkZoneRecordPut: NetworkZoneRecordPut;
    /**
     * The name of the record
     * Example: @
     */
    name: string;
}

//////////
// source: operation.go

/**
 * OperationClassTask represents the Task OperationClass.
 */
export const OperationClassTask = "task";
/**
 * OperationClassWebsocket represents the Websocket OperationClass.
 */
export const OperationClassWebsocket = "websocket";
/**
 * OperationClassToken represents the Token OperationClass.
 */
export const OperationClassToken = "token";
/**
 * Operation represents a background operation
 * swagger:model
 */
export interface Operation {
    /**
     * UUID of the operation
     * Example: 6916c8a6-9b7d-4abd-90b3-aedfec7ec7da
     */
    id: string;
    /**
     * Type of operation (task, token or websocket)
     * Example: websocket
     */
    class: string;
    /**
     * Description of the operation
     * Example: Executing command
     */
    description: string;
    /**
     * Operation creation time
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    created_at: string;
    /**
     * Operation last change
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    updated_at: string;
    /**
     * Status name
     * Example: Running
     */
    status: string;
    /**
     * Status code
     * Example: 103
     */
    status_code: StatusCode;
    /**
     * Affected resources
     * Example: {"instances": ["/1.0/instances/foo"]}
     */
    resources: { [key: string]: string[]};
    /**
     * Operation specific metadata
     * Example: {"command": ["bash"], "environment": {"HOME": "/root", "LANG": "C.UTF-8", "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "TERM": "xterm", "USER": "root"}, "fds": {"0": "da3046cf02c0116febf4ef3fe4eaecdf308e720c05e5a9c730ce1a6f15417f66", "1": "05896879d8692607bd6e4a09475667da3b5f6714418ab0ee0e5720b4c57f754b"}, "interactive": true}
     */
    metadata: { [key: string]: any};
    /**
     * Whether the operation can be canceled
     * Example: false
     */
    may_cancel: boolean;
    /**
     * Operation error message
     * Example: Some error message
     */
    err: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     * API extension: operation_location
     */
    location: string;
}

//////////
// source: profile.go

/**
 * ProfilesPost represents the fields of a new profile
 * swagger:model
 */
export interface ProfilesPost {
    ProfilePut: ProfilePut;
    /**
     * The name of the new profile
     * Example: foo
     */
    name: string;
}
/**
 * ProfilePost represents the fields required to rename a profile
 * swagger:model
 */
export interface ProfilePost {
    /**
     * The new name for the profile
     * Example: bar
     */
    name: string;
}
/**
 * ProfilePut represents the modifiable fields of a profile
 * swagger:model
 */
export interface ProfilePut {
    /**
     * Instance configuration map (refer to doc/instances.md)
     * Example: {"limits.cpu": "4", "limits.memory": "4GiB"}
     */
    config: { [key: string]: string};
    /**
     * Description of the profile
     * Example: Medium size instances
     */
    description: string;
    /**
     * List of devices
     * Example: {"root": {"type": "disk", "pool": "default", "path": "/"}, "eth0": {"type": "nic", "network": "mybr0", "name": "eth0"}}
     */
    devices: { [key: string]: { [key: string]: string}};
}
/**
 * Profile represents a profile
 * swagger:model
 */
export interface Profile {
    ProfilePut: ProfilePut;
    /**
     * The profile name
     * Read only: true
     * Example: foo
     */
    name: string;
    /**
     * List of URLs of objects using this profile
     * Read only: true
     * Example: ["/1.0/instances/c1", "/1.0/instances/v1"]
     * API extension: profile_usedby
     */
    used_by: string[];
    /**
     * Project name
     * Example: project1
     * API extension: profiles_all_projects
     */
    project: string;
}

//////////
// source: project.go

/**
 * ProjectDefaultName is the name of the default project that can never be deleted.
 */
export const ProjectDefaultName = "default";
/**
 * ProjectsPost represents the fields of a new project
 * swagger:model
 * API extension: projects.
 */
export interface ProjectsPost {
    ProjectPut: ProjectPut;
    /**
     * The name of the new project
     * Example: foo
     */
    name: string;
}
/**
 * ProjectPost represents the fields required to rename a project
 * swagger:model
 * API extension: projects.
 */
export interface ProjectPost {
    /**
     * The new name for the project
     * Example: bar
     */
    name: string;
}
/**
 * ProjectPut represents the modifiable fields of a project
 * swagger:model
 * API extension: projects.
 */
export interface ProjectPut {
    /**
     * Project configuration map (refer to doc/projects.md)
     * Example: {"features.profiles": "true", "features.networks": "false"}
     */
    config: { [key: string]: string};
    /**
     * Description of the project
     * Example: My new project
     */
    description: string;
}
/**
 * Project represents a project
 * swagger:model
 * API extension: projects.
 */
export interface Project {
    ProjectPut: ProjectPut;
    /**
     * The project name
     * Read only: true
     * Example: foo
     */
    name: string;
    /**
     * List of URLs of objects using this project
     * Read only: true
     * Example: ["/1.0/images/0e60015346f06627f10580d56ac7fffd9ea775f6d4f25987217d5eed94910a20", "/1.0/instances/c1", "/1.0/networks/mybr0", "/1.0/profiles/default", "/1.0/storage-pools/default/volumes/custom/blah"]
     */
    used_by: string[];
}
/**
 * ProjectState represents the current running state of a project
 * swagger:model
 * API extension: project_usage.
 */
export interface ProjectState {
    /**
     * Allocated and used resources
     * Read only: true
     * Example: {"containers": {"limit": 10, "usage": 4}, "cpu": {"limit": 20, "usage": 16}}
     */
    resources: { [key: string]: ProjectStateResource};
}
/**
 * ProjectStateResource represents the state of a particular resource in a project
 * swagger:model
 * API extension: project_usage.
 */
export interface ProjectStateResource {
    /**
     * Limit for the resource (-1 if none)
     * Example: 10
     */
    Limit: number /* int64 */;
    /**
     * Current usage for the resource
     * Example: 4
     */
    Usage: number /* int64 */;
}

//////////
// source: resource.go

/**
 * Resources represents the system hardware resources
 * swagger:model
 * API extension: resources.
 */
export interface Resources {
    /**
     * CPU information
     */
    cpu: ResourcesCPU;
    /**
     * Memory information
     */
    memory: ResourcesMemory;
    /**
     * GPU devices
     * API extension: resources_gpu
     */
    gpu: ResourcesGPU;
    /**
     * Network devices
     * API extension: resources_v2
     */
    network: ResourcesNetwork;
    /**
     * Storage devices
     * API extension: resources_v2
     */
    storage: ResourcesStorage;
    /**
     * USB devices
     * API extension: resources_usb_pci
     */
    usb: ResourcesUSB;
    /**
     * PCI devices
     * API extension: resources_usb_pci
     */
    pci: ResourcesPCI;
    /**
     * System information
     * API extension: resources_system
     */
    system: ResourcesSystem;
    /**
     * Load average information
     * API extension: resources_load
     */
    load: ResourcesLoad;
}
/**
 * ResourcesCPU represents the cpu resources available on the system
 * swagger:model
 * API extension: resources.
 */
export interface ResourcesCPU {
    /**
     * Architecture name
     * Example: x86_64
     * API extension: resources_v2
     */
    architecture: string;
    /**
     * List of CPU sockets
     */
    sockets: ResourcesCPUSocket[];
    /**
     * Total number of CPU threads (from all sockets and cores)
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesCPUSocket represents a CPU socket on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesCPUSocket {
    /**
     * Product name
     * Example: Intel(R) Core(TM) i5-7300U CPU @ 2.60GHz
     */
    name?: string;
    /**
     * Vendor name
     * Example: GenuineIntel
     */
    vendor?: string;
    /**
     * Socket number
     * Example: 0
     */
    socket: number /* uint64 */;
    /**
     * List of CPU caches
     */
    cache?: ResourcesCPUCache[];
    /**
     * List of CPU cores
     */
    cores: ResourcesCPUCore[];
    /**
     * Current CPU frequency (Mhz)
     * Example: 3499
     */
    frequency?: number /* uint64 */;
    /**
     * Minimum CPU frequency (Mhz)
     * Example: 400
     */
    frequency_minimum?: number /* uint64 */;
    /**
     * Maximum CPU frequency (Mhz)
     * Example: 3500
     */
    frequency_turbo?: number /* uint64 */;
    /**
     * Address sizes
     * API extension: resources_cpu_address_sizes.
     */
    address_sizes?: ResourcesCPUAddressSizes;
}
/**
 * ResourcesCPUAddressSizes resprents address size information for a CPU socket.
 * swagger:model
 * API extension: resources_cpu_address_sizes.
 */
export interface ResourcesCPUAddressSizes {
    physical_bits: number /* uint64 */;
    virtual_bits: number /* uint64 */;
}
/**
 * ResourcesCPUCache represents a CPU cache
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesCPUCache {
    /**
     * Cache level (usually a number from 1 to 3)
     * Example: 1
     */
    level: number /* uint64 */;
    /**
     * Type of cache (Data, Instruction, Unified, ...)
     * Example: Data
     */
    type: string;
    /**
     * Size of the cache (in bytes)
     * Example: 32768
     */
    size: number /* uint64 */;
}
/**
 * ResourcesCPUCore represents a CPU core on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesCPUCore {
    /**
     * Core identifier within the socket
     * Example: 0
     */
    core: number /* uint64 */;
    /**
     * What die the CPU is a part of (for chiplet designs)
     * Example: 0
     * API extension: resources_cpu_core_die
     */
    die: number /* uint64 */;
    /**
     * List of threads
     */
    threads: ResourcesCPUThread[];
    /**
     * Current frequency
     * Example: 3500
     */
    frequency?: number /* uint64 */;
    /**
     * List of CPU flags
     * Example: []
     * API extension: resources_cpu_flags
     */
    flags: string[];
}
/**
 * ResourcesCPUThread represents a CPU thread on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesCPUThread {
    /**
     * Thread ID (used for CPU pinning)
     * Example: 0
     */
    id: number /* int64 */;
    /**
     * NUMA node the thread is a part of
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * Thread identifier within the core
     * Example: 0
     */
    thread: number /* uint64 */;
    /**
     * Whether the thread is online (enabled)
     * Example: true
     */
    online: boolean;
    /**
     * Whether the thread has been isolated (outside of normal scheduling)
     * Example: false
     * API extension: resource_cpu_isolated
     */
    isolated: boolean;
}
/**
 * ResourcesGPU represents the GPU resources available on the system
 * swagger:model
 * API extension: resources_gpu.
 */
export interface ResourcesGPU {
    /**
     * List of GPUs
     */
    cards: ResourcesGPUCard[];
    /**
     * Total number of GPUs
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesGPUCard represents a GPU card on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesGPUCard {
    /**
     * Kernel driver currently associated with the GPU
     * Example: i915
     */
    driver?: string;
    /**
     * Version of the kernel driver
     * Example: 5.8.0-36-generic
     */
    driver_version?: string;
    /**
     * DRM information (if card is in used by the host)
     */
    drm?: ResourcesGPUCardDRM;
    /**
     * SRIOV information (when supported by the card)
     */
    sriov?: ResourcesGPUCardSRIOV;
    /**
     * NVIDIA specific information
     */
    nvidia?: ResourcesGPUCardNvidia;
    /**
     * Map of available mediated device profiles
     * Example: null
     * API extension: resources_gpu_mdev
     */
    mdev?: { [key: string]: ResourcesGPUCardMdev};
    /**
     * NUMA node the GPU is a part of
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * PCI address
     * Example: 0000:00:02.0
     */
    pci_address?: string;
    /**
     * Name of the vendor
     * Example: Intel Corporation
     */
    vendor?: string;
    /**
     * PCI ID of the vendor
     * Example: 8086
     */
    vendor_id?: string;
    /**
     * Name of the product
     * Example: HD Graphics 620
     */
    product?: string;
    /**
     * PCI ID of the product
     * Example: 5916
     */
    product_id?: string;
    /**
     * USB address (for USB cards)
     * Example: 2:7
     * API extension: resources_gpu_usb
     */
    usb_address?: string;
}
/**
 * ResourcesGPUCardDRM represents the Linux DRM configuration of the GPU
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesGPUCardDRM {
    /**
     * DRM card ID
     * Example: 0
     */
    id: number /* uint64 */;
    /**
     * Card device name
     * Example: card0
     */
    card_name: string;
    /**
     * Card device number
     * Example: 226:0
     */
    card_device: string;
    /**
     * Control device name
     * Example: controlD64
     */
    control_name?: string;
    /**
     * Control device number
     * Example: 226:0
     */
    control_device?: string;
    /**
     * Render device name
     * Example: renderD128
     */
    render_name?: string;
    /**
     * Render device number
     * Example: 226:128
     */
    render_device?: string;
}
/**
 * ResourcesGPUCardSRIOV represents the SRIOV configuration of the GPU
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesGPUCardSRIOV {
    /**
     * Number of VFs currently configured
     * Example: 0
     */
    current_vfs: number /* uint64 */;
    /**
     * Maximum number of supported VFs
     * Example: 0
     */
    maximum_vfs: number /* uint64 */;
    /**
     * List of VFs (as additional GPU devices)
     * Example: null
     */
    vfs: ResourcesGPUCard[];
}
/**
 * ResourcesGPUCardNvidia represents additional information for NVIDIA GPUs
 * swagger:model
 * API extension: resources_gpu.
 */
export interface ResourcesGPUCardNvidia {
    /**
     * Version of the CUDA API
     * Example: 11.0
     */
    cuda_version?: string;
    /**
     * Version of the NVRM (usually driver version)
     * Example: 450.102.04
     */
    nvrm_version?: string;
    /**
     * Brand name
     * Example: GeForce
     */
    brand: string;
    /**
     * Model name
     * Example: GeForce GT 730
     */
    model: string;
    /**
     * GPU UUID
     * Example: GPU-6ddadebd-dafe-2db9-f10f-125719770fd3
     */
    uuid?: string;
    /**
     * Architecture (generation)
     * Example: 3.5
     */
    architecture?: string;
    /**
     * Card device name
     * Example: nvidia0
     * API extension: resources_v2
     */
    card_name: string;
    /**
     * Card device number
     * Example: 195:0
     * API extension: resources_v2
     */
    card_device: string;
}
/**
 * ResourcesGPUCardMdev represents the mediated devices configuration of the GPU
 * swagger:model
 * API extension: resources_gpu_mdev.
 */
export interface ResourcesGPUCardMdev {
    /**
     * The mechanism used by this device
     * Example: vfio-pci
     */
    api: string;
    /**
     * Number of available devices of this profile
     * Example: 2
     */
    available: number /* uint64 */;
    /**
     * Profile name
     * Example: i915-GVTg_V5_8
     */
    name?: string;
    /**
     * Profile description
     * Example: low_gm_size: 128MB\nhigh_gm_size: 512MB\nfence: 4\nresolution: 1920x1200\nweight: 4
     */
    description?: string;
    /**
     * List of active devices (UUIDs)
     * Example: ["42200aac-0977-495c-8c9e-6c51b9092a01", "b4950c00-1437-41d9-88f6-28d61cf9b9ef"]
     */
    devices: string[];
}
/**
 * ResourcesNetwork represents the network cards available on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesNetwork {
    /**
     * List of network cards
     */
    cards: ResourcesNetworkCard[];
    /**
     * Total number of network cards
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesNetworkCard represents a network card on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesNetworkCard {
    /**
     * Kernel driver currently associated with the card
     * Example: atlantic
     */
    driver?: string;
    /**
     * Version of the kernel driver
     * Example: 5.8.0-36-generic
     */
    driver_version?: string;
    /**
     * List of ports on the card
     */
    ports?: ResourcesNetworkCardPort[];
    /**
     * SRIOV information (when supported by the card)
     */
    sriov?: ResourcesNetworkCardSRIOV;
    /**
     * vDPA information (when supported by the card)
     * API extension: ovn_nic_acceleration_vdpa
     */
    vdpa?: ResourcesNetworkCardVDPA;
    /**
     * NUMA node the card is a part of
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * PCI address (for PCI cards)
     * Example: 0000:0d:00.0
     */
    pci_address?: string;
    /**
     * Name of the vendor
     * Example: Aquantia Corp.
     */
    vendor?: string;
    /**
     * PCI ID of the vendor
     * Example: 1d6a
     */
    vendor_id?: string;
    /**
     * Name of the product
     * Example: AQC107 NBase-T/IEEE
     */
    product?: string;
    /**
     * PCI ID of the product
     * Example: 87b1
     */
    product_id?: string;
    /**
     * Current firmware version
     * Example: 3.1.100
     * API extension: resources_network_firmware
     */
    firmware_version?: string;
    /**
     * USB address (for USB cards)
     * Example: 2:7
     * API extension: resources_network_usb
     */
    usb_address?: string;
}
/**
 * ResourcesNetworkCardPort represents a network port on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesNetworkCardPort {
    /**
     * Port identifier (interface name)
     * Example: eth0
     */
    id: string;
    /**
     * MAC address
     * Example: 00:23:a4:01:01:6f
     */
    address?: string;
    /**
     * Port number
     * Example: 0
     */
    port: number /* uint64 */;
    /**
     * Transport protocol
     * Example: ethernet
     */
    protocol: string;
    /**
     * List of supported modes
     * Example: ["100baseT/Full", "1000baseT/Full", "2500baseT/Full", "5000baseT/Full", "10000baseT/Full"]
     */
    supported_modes?: string[];
    /**
     * List of supported port types
     * Example: ["twisted pair"]
     */
    supported_ports?: string[];
    /**
     * Current port type
     * Example: twisted pair
     */
    port_type?: string;
    /**
     * Type of transceiver used
     * Example: internal
     */
    transceiver_type?: string;
    /**
     * Whether auto negotiation is used
     * Example: true
     */
    auto_negotiation: boolean;
    /**
     * Whether a link was detected
     * Example: true
     */
    link_detected: boolean;
    /**
     * Current speed (Mbit/s)
     * Example: 10000
     */
    link_speed?: number /* uint64 */;
    /**
     * Duplex type
     * Example: full
     */
    link_duplex?: string;
    /**
     * Additional information for infiniband devices
     * API extension: resources_infiniband
     */
    infiniband?: ResourcesNetworkCardPortInfiniband;
}
/**
 * ResourcesNetworkCardPortInfiniband represents the Linux Infiniband configuration for the port
 * swagger:model
 * API extension: resources_infiniband.
 */
export interface ResourcesNetworkCardPortInfiniband {
    /**
     * ISSM device name
     * Example: issm0
     */
    issm_name?: string;
    /**
     * ISSM device number
     * Example: 231:64
     */
    issm_device?: string;
    /**
     * MAD device name
     * Example: umad0
     */
    mad_name?: string;
    /**
     * MAD device number
     * Example: 231:0
     */
    mad_device?: string;
    /**
     * Verb device name
     * Example: uverbs0
     */
    verb_name?: string;
    /**
     * Verb device number
     * Example: 231:192
     */
    verb_device?: string;
}
/**
 * ResourcesNetworkCardSRIOV represents the SRIOV configuration of the network card
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesNetworkCardSRIOV {
    /**
     * Number of VFs currently configured
     * Example: 0
     */
    current_vfs: number /* uint64 */;
    /**
     * Maximum number of supported VFs
     * Example: 0
     */
    maximum_vfs: number /* uint64 */;
    /**
     * List of VFs (as additional Network devices)
     * Example: null
     */
    vfs: ResourcesNetworkCard[];
}
/**
 * ResourcesNetworkCardVDPA represents the VDPA configuration of the network card
 * swagger:model
 * API extension: ovn_nic_acceleration_vdpa.
 */
export interface ResourcesNetworkCardVDPA {
    /**
     * Name of the VDPA device
     */
    name: string;
    /**
     * Device identifier of the VDPA device
     */
    device: string;
}
/**
 * ResourcesStorage represents the local storage
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesStorage {
    /**
     * List of disks
     */
    disks: ResourcesStorageDisk[];
    /**
     * Total number of partitions
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesStorageDisk represents a disk
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesStorageDisk {
    /**
     * ID of the disk (device name)
     * Example: nvme0n1
     */
    id: string;
    /**
     * Device number
     * Example: 259:0
     */
    device: string;
    /**
     * Disk model name
     * Example: INTEL SSDPEKKW256G7
     */
    model?: string;
    /**
     * Storage type
     * Example: nvme
     */
    type?: string;
    /**
     * Whether the disk is read-only
     * Example: false
     */
    read_only: boolean;
    /**
     * Total size of the disk (bytes)
     * Example: 256060514304
     */
    size: number /* uint64 */;
    /**
     * Whether the disk is removable (hot-plug)
     * Example: false
     */
    removable: boolean;
    /**
     * WWN identifier
     * Example: eui.0000000001000000e4d25cafae2e4c00
     */
    wwn?: string;
    /**
     * NUMA node the disk is a part of
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * Device by-path identifier
     * Example: pci-0000:05:00.0-nvme-1
     * API extension: resources_disk_sata
     */
    device_path?: string;
    /**
     * Block size
     * Example: 512
     * API extension: resources_disk_sata
     */
    block_size: number /* uint64 */;
    /**
     * Current firmware version
     * Example: PSF121C
     * API extension: resources_disk_sata
     */
    firmware_version?: string;
    /**
     * Rotation speed (RPM)
     * Example: 0
     * API extension: resources_disk_sata
     */
    rpm: number /* uint64 */;
    /**
     * Serial number
     * Example: BTPY63440ARH256D
     * API extension: resources_disk_sata
     */
    serial?: string;
    /**
     * Device by-id identifier
     * Example: nvme-eui.0000000001000000e4d25cafae2e4c00
     * API extension: resources_disk_id
     */
    device_id: string;
    /**
     * List of partitions
     */
    partitions: ResourcesStorageDiskPartition[];
    /**
     * PCI address
     * Example: 0000:05:00.0
     * API extension: resources_disk_address
     */
    pci_address?: string;
    /**
     * USB address
     * Example: 3:5
     * API extension: resources_disk_address
     */
    usb_address?: string;
}
/**
 * ResourcesStorageDiskPartition represents a partition on a disk
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesStorageDiskPartition {
    /**
     * ID of the partition (device name)
     * Example: nvme0n1p1
     */
    id: string;
    /**
     * Device number
     * Example: 259:1
     */
    device: string;
    /**
     * Whether the partition is read-only
     * Example: false
     */
    read_only: boolean;
    /**
     * Size of the partition (bytes)
     * Example: 254933278208
     */
    size: number /* uint64 */;
    /**
     * Partition number
     * Example: 1
     */
    partition: number /* uint64 */;
}
/**
 * ResourcesMemory represents the memory resources available on the system
 * swagger:model
 * API extension: resources.
 */
export interface ResourcesMemory {
    /**
     * List of NUMA memory nodes
     * Example: null
     * API extension: resources_v2
     */
    nodes?: ResourcesMemoryNode[];
    /**
     * Total of memory huge pages (bytes)
     * Example: 429284917248
     */
    hugepages_total: number /* uint64 */;
    /**
     * Used memory huge pages (bytes)
     * Example: 429284917248
     */
    hugepages_used: number /* uint64 */;
    /**
     * Size of memory huge pages (bytes)
     * Example: 2097152
     */
    hugepages_size: number /* uint64 */;
    /**
     * Used system memory (bytes)
     * Example: 557450502144
     */
    used: number /* uint64 */;
    /**
     * Total system memory (bytes)
     * Example: 687194767360
     */
    total: number /* uint64 */;
}
/**
 * ResourcesMemoryNode represents the node-specific memory resources available on the system
 * swagger:model
 * API extension: resources_v2.
 */
export interface ResourcesMemoryNode {
    /**
     * NUMA node identifier
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * Used memory huge pages (bytes)
     * Example: 214536552448
     */
    hugepages_used: number /* uint64 */;
    /**
     * Total of memory huge pages (bytes)
     * Example: 214536552448
     */
    hugepages_total: number /* uint64 */;
    /**
     * Used system memory (bytes)
     * Example: 264880439296
     */
    used: number /* uint64 */;
    /**
     * Total system memory (bytes)
     * Example: 343597383680
     */
    total: number /* uint64 */;
}
/**
 * ResourcesStoragePool represents the resources available to a given storage pool
 * swagger:model
 * API extension: resources.
 */
export interface ResourcesStoragePool {
    /**
     * Disk space usage
     */
    space?: ResourcesStoragePoolSpace;
    /**
     * Disk inode usage
     */
    inodes?: ResourcesStoragePoolInodes;
}
/**
 * ResourcesStoragePoolSpace represents the space available to a given storage pool
 * swagger:model
 * API extension: resources.
 */
export interface ResourcesStoragePoolSpace {
    /**
     * Used disk space (bytes)
     * Example: 343537419776
     */
    used?: number /* uint64 */;
    /**
     * Total disk space (bytes)
     * Example: 420100937728
     */
    total: number /* uint64 */;
}
/**
 * ResourcesStoragePoolInodes represents the inodes available to a given storage pool
 * swagger:model
 * API extension: resources.
 */
export interface ResourcesStoragePoolInodes {
    /**
     * Used inodes
     * Example: 23937695
     */
    used: number /* uint64 */;
    /**
     * Total inodes
     * Example: 30709993797
     */
    total: number /* uint64 */;
}
/**
 * ResourcesUSB represents the USB devices available on the system
 * swagger:model
 * API extension: resources_usb_pci.
 */
export interface ResourcesUSB {
    /**
     * List of USB devices
     */
    devices: ResourcesUSBDevice[];
    /**
     * Total number of USB devices
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesUSBDevice represents a USB device
 * swagger:model
 * API extension: resources_usb_pci.
 */
export interface ResourcesUSBDevice {
    /**
     * USB address (bus)
     * Example: 1
     */
    bus_address: number /* uint64 */;
    /**
     * USB address (device)
     * Example: 3
     */
    device_address: number /* uint64 */;
    /**
     * USB serial number
     * Example: DAE005fp
     * API extension: device_usb_serial.
     */
    serial: string;
    /**
     * List of USB interfaces
     */
    interfaces: ResourcesUSBDeviceInterface[];
    /**
     * Name of the vendor
     * Example: ATEN International Co., Ltd
     */
    vendor: string;
    /**
     * USB ID of the vendor
     * Example: 0557
     */
    vendor_id: string;
    /**
     * Name of the product
     * Example: Hermon USB hidmouse Device
     */
    product: string;
    /**
     * USB ID of the product
     * Example: 2221
     */
    product_id: string;
    /**
     * Transfer speed (Mbit/s)
     * Example: 12
     */
    speed: number /* float64 */;
}
/**
 * ResourcesUSBDeviceInterface represents a USB device interface
 * swagger:model
 * API extension: resources_usb_pci.
 */
export interface ResourcesUSBDeviceInterface {
    /**
     * Class of USB interface
     * Example: Human Interface Device
     */
    class: string;
    /**
     * ID of the USB interface class
     * Example: 3
     */
    class_id: number /* uint64 */;
    /**
     * Kernel driver currently associated with the device
     * Example: usbhid
     */
    driver: string;
    /**
     * Version of the kernel driver
     * Example: 5.8.0-36-generic
     */
    driver_version: string;
    /**
     * Interface number
     * Example: 0
     */
    number: number /* uint64 */;
    /**
     * Sub class of the interface
     * Example: Boot Interface Subclass
     */
    subclass: string;
    /**
     * ID of the USB interface sub class
     * Example: 1
     */
    subclass_id: number /* uint64 */;
}
/**
 * ResourcesPCI represents the PCI devices available on the system
 * swagger:model
 * API extension: resources_usb_pci.
 */
export interface ResourcesPCI {
    /**
     * List of PCI devices
     */
    devices: ResourcesPCIDevice[];
    /**
     * Total number of PCI devices
     * Example: 1
     */
    total: number /* uint64 */;
}
/**
 * ResourcesPCIDevice represents a PCI device
 * swagger:model
 * API extension: resources_usb_pci.
 */
export interface ResourcesPCIDevice {
    /**
     * Kernel driver currently associated with the GPU
     * Example: mgag200
     */
    driver: string;
    /**
     * Version of the kernel driver
     * Example: 5.8.0-36-generic
     */
    driver_version: string;
    /**
     * NUMA node the card is a part of
     * Example: 0
     */
    numa_node: number /* uint64 */;
    /**
     * PCI address
     * Example: 0000:07:03.0
     */
    pci_address: string;
    /**
     * Name of the vendor
     * Example: Matrox Electronics Systems Ltd.
     */
    vendor: string;
    /**
     * PCI ID of the vendor
     * Example: 102b
     */
    vendor_id: string;
    /**
     * Name of the product
     * Example: MGA G200eW WPCM450
     */
    product: string;
    /**
     * PCI ID of the product
     * Example: 0532
     */
    product_id: string;
    /**
     * IOMMU group number
     * Example: 20
     * API extension: resources_pci_iommu
     */
    iommu_group: number /* uint64 */;
    /**
     * Vital Product Data
     * Example:
     * API extension: resources_pci_vpd
     */
    vpd: ResourcesPCIVPD;
}
/**
 * ResourcesPCIVPD represents VPD entries for a device
 * swagger:model
 * API extension: resources_pci_vpd.
 */
export interface ResourcesPCIVPD {
    /**
     * Hardware provided product name.
     * Example: HP Ethernet 1Gb 4-port 331i Adapter
     */
    product_name?: string;
    /**
     * Vendor provided key/value pairs.
     * Example: {"EC": ""A-5545", "MN": "103C", "V0": "5W PCIeGen2"}
     */
    entries?: { [key: string]: string};
}
/**
 * ResourcesSystem represents the system
 * swagger:model
 * API extension: resources_system.
 */
export interface ResourcesSystem {
    /**
     * System UUID
     * Example: 7fa1c0cc-2271-11b2-a85c-aab32a05d71a
     */
    uuid: string;
    /**
     * System vendor
     * Example: LENOVO
     */
    vendor: string;
    /**
     * System model
     * Example: 20HRCTO1WW
     */
    product: string;
    /**
     * System family
     * Example: ThinkPad X1 Carbon 5th
     */
    family: string;
    /**
     * System version
     * Example: ThinkPad X1 Carbon 5th
     */
    version: string;
    /**
     * System nanufacturer SKU
     * LENOVO_MT_20HR_BU_Think_FM_ThinkPad X1 Carbon 5th
     */
    sku: string;
    /**
     * System serial number
     * Example: PY3DD4X9
     */
    serial: string;
    /**
     * System type (unknown, physical, virtual-machine, container, ...)
     * Example: physical
     */
    type: string;
    /**
     * Firmware details
     */
    firmware?: ResourcesSystemFirmware;
    /**
     * Chassis details
     */
    chassis?: ResourcesSystemChassis;
    /**
     * Motherboard details
     */
    motherboard?: ResourcesSystemMotherboard;
}
/**
 * ResourcesSystemFirmware represents the system firmware
 * swagger:model
 * API extension: resources_system.
 */
export interface ResourcesSystemFirmware {
    /**
     * Firmware vendor
     * Example: Lenovo
     */
    vendor: string;
    /**
     * Firmware build date
     * Example: 10/14/2020
     */
    date: string;
    /**
     * Firmware version
     * Example: N1MET64W (1.49)
     */
    version: string;
}
/**
 * ResourcesSystemChassis represents the system chassis
 * swagger:model
 * API extension: resources_system.
 */
export interface ResourcesSystemChassis {
    /**
     * Chassis vendor
     * Example: Lenovo
     */
    vendor: string;
    /**
     * Chassis type
     * Example: Notebook
     */
    type: string;
    /**
     * Chassis serial number
     * Example: PY3DD4X9
     */
    serial: string;
    /**
     * Chassis version/revision
     * Example: None
     */
    version: string;
}
/**
 * ResourcesSystemMotherboard represents the motherboard
 * swagger:model
 * API extension: resources_system.
 */
export interface ResourcesSystemMotherboard {
    /**
     * Motherboard vendor
     * Example: Lenovo
     */
    vendor: string;
    /**
     * Motherboard model
     * Example: 20HRCTO1WW
     */
    product: string;
    /**
     * Motherboard serial number
     * Example: L3CF4FX003A
     */
    serial: string;
    /**
     * Motherboard version/revision
     * Example: None
     */
    version: string;
}
/**
 * ResourcesLoad represents system load information
 * swagger:model
 * API extension: resources_load.
 */
export interface ResourcesLoad {
    /**
     * Load average in the past minute
     * Example: 0.69
     */
    Average1Min: number /* float64 */;
    /**
     * Load average in the past 5 minutes
     * Example: 1.10
     */
    Average5Min: number /* float64 */;
    /**
     * Load average in the past 10 minutes
     * Example: 1.29
     */
    Average10Min: number /* float64 */;
    /**
     * The number of active processes
     * Example: 1234
     */
    Processes: number /* int */;
}

//////////
// source: response.go

/**
 * ResponseRaw represents an operation in its original form.
 */
export interface ResponseRaw {
    type: ResponseType;
    /**
     * Valid only for Sync responses
     */
    status: string;
    status_code: number /* int */;
    /**
     * Valid only for Async responses
     */
    operation: string;
    /**
     * Valid only for Error responses
     */
    error_code: number /* int */;
    error: string;
    metadata: any;
}
/**
 * Response represents an operation.
 */
export interface Response {
    type: ResponseType;
    /**
     * Valid only for Sync responses
     */
    status: string;
    status_code: number /* int */;
    /**
     * Valid only for Async responses
     */
    operation: string;
    /**
     * Valid only for Error responses
     */
    error_code: number /* int */;
    error: string;
    /**
     * Valid for Sync and Error responses
     */
    metadata: any /* json.RawMessage */;
}
/**
 * ResponseType represents a valid response type.
 */
export type ResponseType = string;
/**
 * Response types.
 */
export const SyncResponse: ResponseType = "sync";
/**
 * Response types.
 */
export const AsyncResponse: ResponseType = "async";
/**
 * Response types.
 */
export const ErrorResponse: ResponseType = "error";

//////////
// source: server.go

/**
 * ServerEnvironment represents the read-only environment fields of a server configuration.
 */
export interface ServerEnvironment {
    /**
     * List of addresses the server is listening on
     * Example: [":8443"]
     */
    addresses: string[];
    /**
     * List of architectures supported by the server
     * Example: ["x86_64", "i686"]
     */
    architectures: string[];
    /**
     * Server certificate as PEM encoded X509
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * Server certificate fingerprint as SHA256
     * Example: fd200419b271f1dc2a5591b693cc5774b7f234e1ff8c6b78ad703b6888fe2b69
     */
    certificate_fingerprint: string;
    /**
     * List of supported instance drivers (separate by " | ")
     * Example: lxc | qemu
     */
    driver: string;
    /**
     * List of supported instance driver versions (separate by " | ")
     * Example: 4.0.7 | 5.2.0
     */
    driver_version: string;
    /**
     * Current firewall driver
     * Example: nftables
     * API extension: firewall_driver
     */
    firewall: string;
    /**
     * OS kernel name
     * Example: Linux
     */
    kernel: string;
    /**
     * OS kernel architecture
     * Example: x86_64
     */
    kernel_architecture: string;
    /**
     * Map of kernel features that were tested on startup
     * Example: {"netnsid_getifaddrs": "true", "seccomp_listener": "true"}
     * API extension: kernel_features
     */
    kernel_features: { [key: string]: string};
    /**
     * Kernel version
     * Example: 5.4.0-36-generic
     */
    kernel_version: string;
    /**
     * Map of LXC features that were tested on startup
     * Example: {"cgroup2": "true", "devpts_fd": "true", "pidfd": "true"}
     * API extension: lxc_features
     */
    lxc_features: { [key: string]: string};
    /**
     * Name of the operating system (Linux distribution)
     * Example: Ubuntu
     * API extension: api_os
     */
    os_name: string;
    /**
     * Version of the operating system (Linux distribution)
     * Example: 22.04
     * API extension: api_os
     */
    os_version: string;
    /**
     * Current project name
     * Example: default
     * API extension: projects
     */
    project: string;
    /**
     * Server implementation name
     * Example: incus
     */
    server: string;
    /**
     * Whether the server is part of a cluster
     * Example: false
     * API extension: clustering
     */
    server_clustered: boolean;
    /**
     * Mode that the event distribution subsystem is operating in on this server.
     * Either "full-mesh", "hub-server" or "hub-client".
     * Example: full-mesh
     * API extension: event_hub
     */
    server_event_mode: string;
    /**
     * Server hostname
     * Example: castiana
     * API extension: clustering
     */
    server_name: string;
    /**
     * PID of the daemon
     * Example: 1453969
     */
    server_pid: number /* int */;
    /**
     * Server version
     * Example: 4.11
     */
    server_version: string;
    /**
     * List of active storage drivers (separate by " | ")
     * Example: dir | zfs
     */
    storage: string;
    /**
     * List of active storage driver versions (separate by " | ")
     * Example: 1 | 0.8.4-1ubuntu11
     */
    storage_version: string;
    /**
     * List of supported storage drivers
     */
    storage_supported_drivers: ServerStorageDriverInfo[];
}
/**
 * ServerStorageDriverInfo represents the read-only info about a storage driver
 * swagger:model
 * API extension: server_supported_storage_drivers.
 */
export interface ServerStorageDriverInfo {
    /**
     * Name of the driver
     * Example: zfs
     * API extension: server_supported_storage_drivers
     */
    Name: string;
    /**
     * Version of the driver
     * Example: 0.8.4-1ubuntu11
     * API extension: server_supported_storage_drivers
     */
    Version: string;
    /**
     * Whether the driver has remote volumes
     * Example: false
     * API extension: server_supported_storage_drivers
     */
    Remote: boolean;
}
/**
 * ServerPut represents the modifiable fields of a server configuration
 * swagger:model
 */
export interface ServerPut {
    /**
     * Server configuration map (refer to doc/server.md)
     * Example: {"core.https_address": ":8443"}
     */
    config: { [key: string]: string};
}
/**
 * ServerUntrusted represents a server configuration for an untrusted client
 * swagger:model
 */
export interface ServerUntrusted {
    ServerPut: ServerPut;
    /**
     * List of supported API extensions
     * Read only: true
     * Example: ["etag", "patch", "network", "storage"]
     */
    api_extensions: string[];
    /**
     * Support status of the current API (one of "devel", "stable" or "deprecated")
     * Read only: true
     * Example: stable
     */
    api_status: string;
    /**
     * API version number
     * Read only: true
     * Example: 1.0
     */
    api_version: string;
    /**
     * Whether the client is trusted (one of "trusted" or "untrusted")
     * Read only: true
     * Example: untrusted
     */
    auth: string;
    /**
     * Whether the server is public-only (only public endpoints are implemented)
     * Read only: true
     * Example: false
     */
    public: boolean;
    /**
     * List of supported authentication methods
     * Read only: true
     * Example: ["tls"]
     * API extension: macaroon_authentication
     */
    auth_methods: string[];
}
/**
 * Server represents a server configuration
 * swagger:model
 */
export interface Server {
    ServerUntrusted: ServerUntrusted;
    /**
     * The current API user identifier
     * Read only: true
     * Example: uid=201105
     * API extension: auth_user
     */
    auth_user_name: string;
    /**
     * The current API user login method
     * Read only: true
     * Example: unix
     * API extension: auth_user
     */
    auth_user_method: string;
    /**
     * Read-only status/configuration information
     * Read only: true
     */
    environment: ServerEnvironment;
}

//////////
// source: status_code.go

/**
 * StatusCode represents a valid operation and container status.
 */
export type StatusCode = number /* int */;
/**
 * Status codes.
 */
export const OperationCreated: StatusCode = 100;
/**
 * Status codes.
 */
export const Started: StatusCode = 101;
/**
 * Status codes.
 */
export const Stopped: StatusCode = 102;
/**
 * Status codes.
 */
export const Running: StatusCode = 103;
/**
 * Status codes.
 */
export const Cancelling: StatusCode = 104;
/**
 * Status codes.
 */
export const Pending: StatusCode = 105;
/**
 * Status codes.
 */
export const Starting: StatusCode = 106;
/**
 * Status codes.
 */
export const Stopping: StatusCode = 107;
/**
 * Status codes.
 */
export const Aborting: StatusCode = 108;
/**
 * Status codes.
 */
export const Freezing: StatusCode = 109;
/**
 * Status codes.
 */
export const Frozen: StatusCode = 110;
/**
 * Status codes.
 */
export const Thawed: StatusCode = 111;
/**
 * Status codes.
 */
export const Error: StatusCode = 112;
/**
 * Status codes.
 */
export const Ready: StatusCode = 113;
/**
 * Status codes.
 */
export const Success: StatusCode = 200;
/**
 * Status codes.
 */
export const Failure: StatusCode = 400;
/**
 * Status codes.
 */
export const Cancelled: StatusCode = 401;

//////////
// source: storage_pool.go

/**
 * StoragePoolStatusPending storage pool is pending creation on other cluster nodes.
 */
export const StoragePoolStatusPending = "Pending";
/**
 * StoragePoolStatusCreated storage pool is fully created.
 */
export const StoragePoolStatusCreated = "Created";
/**
 * StoragePoolStatusErrored storage pool is in error status.
 */
export const StoragePoolStatusErrored = "Errored";
/**
 * StoragePoolStatusUnknown storage pool is in unknown status.
 */
export const StoragePoolStatusUnknown = "Unknown";
/**
 * StoragePoolStatusUnvailable storage pool failed to initialize.
 */
export const StoragePoolStatusUnvailable = "Unavailable";
/**
 * StoragePoolsPost represents the fields of a new storage pool
 * swagger:model
 * API extension: storage.
 */
export interface StoragePoolsPost {
    StoragePoolPut: StoragePoolPut;
    /**
     * Storage pool name
     * Example: local
     */
    name: string;
    /**
     * Storage pool driver (btrfs, ceph, cephfs, cephobject, dir, lvm, lvmcluster or zfs)
     * Example: zfs
     */
    driver: string;
}
/**
 * StoragePool represents the fields of a storage pool.
 * swagger:model
 * API extension: storage.
 */
export interface StoragePool {
    StoragePoolPut: StoragePoolPut;
    /**
     * Storage pool name
     * Example: local
     */
    name: string;
    /**
     * Storage pool driver (btrfs, ceph, cephfs, cephobject, dir, lvm, lvmcluster or zfs)
     * Example: zfs
     */
    driver: string;
    /**
     * List of URLs of objects using this storage pool
     * Example: ["/1.0/profiles/default", "/1.0/instances/c1"]
     */
    used_by: string[];
    /**
     * Pool status (Pending, Created, Errored or Unknown)
     * Read only: true
     * Example: Created
     * API extension: clustering
     */
    status: string;
    /**
     * Cluster members on which the storage pool has been defined
     * Read only: true
     * Example: ["server01", "server02", "server03"]
     * API extension: clustering
     */
    locations: string[];
}
/**
 * StoragePoolPut represents the modifiable fields of a storage pool.
 * swagger:model
 * API extension: storage.
 */
export interface StoragePoolPut {
    /**
     * Storage pool configuration map (refer to doc/storage.md)
     * Example: {"volume.block.filesystem": "ext4", "volume.size": "50GiB"}
     */
    config: { [key: string]: string};
    /**
     * Description of the storage pool
     * Example: Local SSD pool
     * API extension: entity_description
     */
    description: string;
}
/**
 * StoragePoolState represents the state of a storage pool.
 * swagger:model
 * API extension: cluster_member_state.
 */
export interface StoragePoolState {
    ResourcesStoragePool: ResourcesStoragePool;
}

//////////
// source: storage_pool_bucket.go

/**
 * StorageBucketsPost represents the fields of a new storage pool bucket
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucketsPost {
    StorageBucketPut: StorageBucketPut;
    /**
     * Bucket name
     * Example: foo
     * API extension: storage_buckets
     */
    name: string;
}
/**
 * StorageBucketPut represents the modifiable fields of a storage pool bucket
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucketPut {
    /**
     * Storage bucket configuration map
     * Example: {"size": "50GiB"}
     * API extension: storage_buckets
     */
    config: { [key: string]: string};
    /**
     * Description of the storage bucket
     * Example: My custom bucket
     * API extension: storage_buckets
     */
    description: string;
}
/**
 * StorageBucket represents the fields of a storage pool bucket
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucket {
    StorageBucketPut: StorageBucketPut;
    /**
     * Bucket name
     * Example: foo
     * API extension: storage_buckets
     */
    name: string;
    /**
     * Bucket S3 URL
     * Example: https://127.0.0.1:8080/foo
     * API extension: storage_buckets
     */
    s3_url: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     * API extension: storage_buckets
     */
    location: string;
    /**
     * Project name
     * Example: project1
     * API extension: storage_buckets_all_projects
     */
    project: string;
}
/**
 * StorageBucketKeysPost represents the fields of a new storage pool bucket key
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucketKeysPost {
    StorageBucketKeyPut: StorageBucketKeyPut;
    /**
     * Key name
     * Example: my-read-only-key
     * API extension: storage_buckets
     */
    name: string;
}
/**
 * StorageBucketKeyPut represents the modifiable fields of a storage pool bucket key
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucketKeyPut {
    /**
     * Description of the storage bucket key
     * Example: My read-only bucket key
     * API extension: storage_buckets
     */
    description: string;
    /**
     * Whether the key can perform write actions or not.
     * Example: read-only
     * API extension: storage_buckets
     */
    role: string;
    /**
     * Access key
     * Example: 33UgkaIBLBIxb7O1
     * API extension: storage_buckets
     */
    'access-key': string;
    /**
     * Secret key
     * Example: kDQD6AOgwHgaQI1UIJBJpPaiLgZuJbq0
     * API extension: storage_buckets
     */
    'secret-key': string;
}
/**
 * StorageBucketKey represents the fields of a storage pool bucket key
 * swagger:model
 * API extension: storage_buckets.
 */
export interface StorageBucketKey {
    StorageBucketKeyPut: StorageBucketKeyPut;
    /**
     * Key name
     * Example: my-read-only-key
     * API extension: storage_buckets
     */
    name: string;
}

//////////
// source: storage_pool_bucket_backup.go

/**
 * StorageBucketBackup represents the fields available for a new storage bucket backup
 * swagger:model
 * API extension: storage_bucket_backup.
 */
export interface StorageBucketBackup {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * What compression algorithm to use
     * Example: gzip
     */
    compression_algorithm: string;
}
/**
 * StorageBucketBackupsPost represents the fields available for a new storage bucket backup
 * swagger:model
 * API extension: storage_bucket_backup.
 */
export interface StorageBucketBackupsPost {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * What compression algorithm to use
     * Example: gzip
     */
    compression_algorithm: string;
}
/**
 * StorageBucketBackupPost represents the fields available for the renaming of a bucket backup
 * swagger:model
 * API extension: storage_bucket_backup.
 */
export interface StorageBucketBackupPost {
    /**
     * New backup name
     * Example: backup1
     */
    name: string;
}

//////////
// source: storage_pool_volume.go

/**
 * StorageVolumesPost represents the fields of a new storage pool volume
 * swagger:model
 * API extension: storage.
 */
export interface StorageVolumesPost {
    StorageVolumePut: StorageVolumePut;
    /**
     * Volume name
     * Example: foo
     */
    name: string;
    /**
     * Volume type (container, custom, image or virtual-machine)
     * Example: custom
     */
    type: string;
    /**
     * Migration source
     * API extension: storage_api_local_volume_handling
     */
    source: StorageVolumeSource;
    /**
     * Volume content type (filesystem or block)
     * Example: filesystem
     * API extension: custom_block_volumes
     */
    content_type: string;
}
/**
 * StorageVolumePost represents the fields required to rename a storage pool volume
 * swagger:model
 * API extension: storage_api_volume_rename.
 */
export interface StorageVolumePost {
    /**
     * New volume name
     * Example: foo
     */
    name: string;
    /**
     * New storage pool
     * Example: remote
     * API extension: storage_api_local_volume_handling
     */
    pool?: string;
    /**
     * Initiate volume migration
     * Example: false
     * API extension: storage_api_remote_volume_handling
     */
    migration: boolean;
    /**
     * Migration target (for push mode)
     * API extension: storage_api_remote_volume_handling
     */
    target?: StorageVolumePostTarget;
    /**
     * Whether snapshots should be discarded (migration only)
     * Example: false
     * API extension: storage_api_remote_volume_snapshots
     */
    volume_only: boolean;
    /**
     * New project name
     * Example: foo
     * API extension: storage_volume_project_move
     */
    project?: string;
    /**
     * Migration source
     * API extension: cluster_internal_custom_volume_copy
     */
    source: StorageVolumeSource;
}
/**
 * StorageVolumePostTarget represents the migration target host and operation
 * swagger:model
 * API extension: storage_api_remote_volume_handling.
 */
export interface StorageVolumePostTarget {
    /**
     * The certificate of the migration target
     * Example: X509 PEM certificate
     */
    certificate: string;
    /**
     * Remote operation URL (for migration)
     * Example: https://1.2.3.4:8443/1.0/operations/1721ae08-b6a8-416a-9614-3f89302466e1
     */
    operation?: string;
    /**
     * Migration websockets credentials
     * Example: {"migration": "random-string"}
     */
    secrets?: { [key: string]: string};
}
/**
 * StorageVolume represents the fields of a storage volume.
 * swagger:model
 * API extension: storage.
 */
export interface StorageVolume {
    StorageVolumePut: StorageVolumePut;
    /**
     * Volume name
     * Example: foo
     */
    name: string;
    /**
     * Volume type
     * Example: custom
     */
    type: string;
    /**
     * List of URLs of objects using this storage volume
     * Example: ["/1.0/instances/blah"]
     */
    used_by: string[];
    /**
     * What cluster member this record was found on
     * Example: server01
     * API extension: clustering
     */
    location: string;
    /**
     * Volume content type (filesystem or block)
     * Example: filesystem
     * API extension: custom_block_volumes
     */
    content_type: string;
    /**
     * Project containing the volume.
     * Example: default
     * API extension: storage_volumes_all_projects
     */
    project: string;
    /**
     * Volume creation timestamp
     * Example: 2021-03-23T20:00:00-04:00
     * API extension: storage_volumes_created_at
     */
    created_at: string;
}
/**
 * StorageVolumePut represents the modifiable fields of a storage volume
 * swagger:model
 * API extension: storage.
 */
export interface StorageVolumePut {
    /**
     * Storage volume configuration map (refer to doc/storage.md)
     * Example: {"zfs.remove_snapshots": "true", "size": "50GiB"}
     */
    config: { [key: string]: string};
    /**
     * Description of the storage volume
     * Example: My custom volume
     * API extension: entity_description
     */
    description: string;
    /**
     * Name of a snapshot to restore
     * Example: snap0
     * API extension: storage_api_volume_snapshots
     */
    restore?: string;
}
/**
 * StorageVolumeSource represents the creation source for a new storage volume
 * swagger:model
 * API extension: storage_api_local_volume_handling.
 */
export interface StorageVolumeSource {
    /**
     * Source volume name (for copy)
     * Example: foo
     */
    name: string;
    /**
     * Source type (copy or migration)
     * Example: copy
     */
    type: string;
    /**
     * Source storage pool (for copy)
     * Example: local
     */
    pool: string;
    /**
     * Certificate (for migration)
     * Example: X509 PEM certificate
     * API extension: storage_api_remote_volume_handling
     */
    certificate: string;
    /**
     * Whether to use pull or push mode (for migration)
     * Example: pull
     * API extension: storage_api_remote_volume_handling
     */
    mode?: string;
    /**
     * Remote operation URL (for migration)
     * Example: https://1.2.3.4:8443/1.0/operations/1721ae08-b6a8-416a-9614-3f89302466e1
     * API extension: storage_api_remote_volume_handling
     */
    operation?: string;
    /**
     * Map of migration websockets (for migration)
     * Example: {"rsync": "RANDOM-STRING"}
     * API extension: storage_api_remote_volume_handling
     */
    secrets?: { [key: string]: string};
    /**
     * Whether snapshots should be discarded (for migration)
     * Example: false
     * API extension: storage_api_volume_snapshots
     */
    volume_only: boolean;
    /**
     * Whether existing destination volume should be refreshed
     * Example: false
     * API extension: custom_volume_refresh
     */
    refresh: boolean;
    /**
     * Whether to exclude source snapshots earlier than latest target snapshot
     * Example: false
     * API extension: custom_volume_refresh_exclude_older_snapshots
     */
    refresh_exclude_older: boolean;
    /**
     * Source project name
     * Example: foo
     * API extension: storage_api_project
     */
    project?: string;
    /**
     * What cluster member this record was found on
     * Example: server01
     * API extension: cluster_internal_custom_volume_copy
     */
    location: string;
}

//////////
// source: storage_pool_volume_backup.go

/**
 * StorageVolumeBackup represents a volume backup
 * swagger:model
 * API extension: custom_volume_backup.
 */
export interface StorageVolumeBackup {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup was created
     * Example: 2021-03-23T16:38:37.753398689-04:00
     */
    created_at: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * Whether to ignore snapshots
     * Example: false
     */
    volume_only: boolean;
    /**
     * Whether to use a pool-optimized binary format (instead of plain tarball)
     * Example: true
     */
    optimized_storage: boolean;
}
/**
 * StorageVolumeBackupsPost represents the fields available for a new volume backup
 * swagger:model
 * API extension: custom_volume_backup.
 */
export interface StorageVolumeBackupsPost {
    /**
     * Backup name
     * Example: backup0
     */
    name: string;
    /**
     * When the backup expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    expires_at: string;
    /**
     * Whether to ignore snapshots
     * Example: false
     */
    volume_only: boolean;
    /**
     * Whether to use a pool-optimized binary format (instead of plain tarball)
     * Example: true
     */
    optimized_storage: boolean;
    /**
     * What compression algorithm to use
     * Example: gzip
     */
    compression_algorithm: string;
    /**
     * External upload target
     * The backup will be uploaded and then deleted from local storage.
     * API extension: backup_s3_upload
     */
    target?: BackupTarget;
}
/**
 * StorageVolumeBackupPost represents the fields available for the renaming of a volume backup
 * swagger:model
 * API extension: custom_volume_backup.
 */
export interface StorageVolumeBackupPost {
    /**
     * New backup name
     * Example: backup1
     */
    name: string;
}

//////////
// source: storage_pool_volume_snapshot.go

/**
 * StorageVolumeSnapshotsPost represents the fields available for a new storage volume snapshot
 * swagger:model
 * API extension: storage_api_volume_snapshots.
 */
export interface StorageVolumeSnapshotsPost {
    /**
     * Snapshot name
     * Example: snap0
     */
    name: string;
    /**
     * When the snapshot expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     * API extension: custom_volume_snapshot_expiry
     */
    expires_at?: string;
}
/**
 * StorageVolumeSnapshotPost represents the fields required to rename/move a storage volume snapshot
 * swagger:model
 * API extension: storage_api_volume_snapshots.
 */
export interface StorageVolumeSnapshotPost {
    /**
     * New snapshot name
     * Example: snap1
     */
    name: string;
    /**
     * Initiate volume snapshot migration
     * Example: false
     * API extension: storage_api_remote_volume_snapshot_copy
     */
    migration: boolean;
    /**
     * Migration target (for push mode)
     * API extension: storage_api_remote_volume_snapshot_copy
     */
    target?: StorageVolumePostTarget;
}
/**
 * StorageVolumeSnapshot represents a storage volume snapshot
 * swagger:model
 * API extension: storage_api_volume_snapshots.
 */
export interface StorageVolumeSnapshot {
    StorageVolumeSnapshotPut: StorageVolumeSnapshotPut;
    /**
     * Snapshot name
     * Example: snap0
     */
    name: string;
    /**
     * Storage volume configuration map (refer to doc/storage.md)
     * Example: {"zfs.remove_snapshots": "true", "size": "50GiB"}
     */
    config: { [key: string]: string};
    /**
     * The content type (filesystem or block)
     * Example: filesystem
     * API extension: custom_block_volumes
     */
    content_type: string;
    /**
     * Volume snapshot creation timestamp
     * Example: 2021-03-23T20:00:00-04:00
     * API extension: storage_volumes_created_at
     */
    created_at: string;
}
/**
 * StorageVolumeSnapshotPut represents the modifiable fields of a storage volume
 * swagger:model
 * API extension: storage_api_volume_snapshots.
 */
export interface StorageVolumeSnapshotPut {
    /**
     * Description of the storage volume
     * Example: My custom volume
     */
    description: string;
    /**
     * When the snapshot expires (gets auto-deleted)
     * Example: 2021-03-23T17:38:37.753398689-04:00
     * API extension: custom_volume_snapshot_expiry
     */
    expires_at?: string;
}

//////////
// source: storage_pool_volume_state.go

/**
 * StorageVolumeState represents the live state of the volume
 * swagger:model
 * API extension: storage_volume_state.
 */
export interface StorageVolumeState {
    /**
     * Volume usage
     */
    usage?: StorageVolumeStateUsage;
}
/**
 * StorageVolumeStateUsage represents the disk usage of a volume
 * swagger:model
 * API extension: storage_volume_state.
 */
export interface StorageVolumeStateUsage {
    /**
     * Used space in bytes
     * Example: 1693552640
     */
    used?: number /* uint64 */;
    /**
     * Storage volume size in bytes
     * Example: 5189222192
     * API extension: storage_volume_state_total
     */
    total: number /* int64 */;
}

//////////
// source: url.go

/**
 * URL represents an endpoint for the REST API.
 */
export interface URL {
    URL: any /* url.URL */;
}

//////////
// source: warning.go

/**
 * Warning represents a warning entry.
 * swagger:model
 * API extension: warnings.
 */
export interface Warning {
    WarningPut: WarningPut;
    /**
     * UUID of the warning
     * Example: e9e9da0d-2538-4351-8047-46d4a8ae4dbb
     */
    uuid: string;
    /**
     * What cluster member this warning occurred on
     * Example: server01
     */
    location: string;
    /**
     * The project the warning occurred in
     * Example: default
     */
    project: string;
    /**
     * Type type of warning
     * Example: Couldn't find CGroup
     */
    type: string;
    /**
     * The number of times this warning occurred
     * Example: 1
     */
    count: number /* int */;
    /**
     * The first time this warning occurred
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    first_seen_at: string;
    /**
     * The last time this warning occurred
     * Example: 2021-03-23T17:38:37.753398689-04:00
     */
    last_seen_at: string;
    /**
     * The warning message
     * Example: Couldn't find the CGroup blkio.weight, disk priority will be ignored
     */
    last_message: string;
    /**
     * The severity of this warning
     * Example: low
     */
    severity: string;
    /**
     * The entity affected by this warning
     * Example: /1.0/instances/c1?project=default
     */
    entity_url: string;
}
/**
 * WarningPut represents the modifiable fields of a warning.
 * swagger:model
 * API extension: warnings.
 */
export interface WarningPut {
    /**
     * Status of the warning (new, acknowledged, or resolved)
     * Example: new
     */
    status: string;
}
