// Code generated by tygo. DO NOT EDIT.

//////////
// source: go.go

/**
 * GoInfo contains info about the go runtime
 */
export interface GoInfo {
    os: string;
    arch: string;
    max_procs: number /* int */;
    version: string;
}

//////////
// source: host.go

/**
 * Host is the interface that wraps methods for returning Host stats
 * It may return partial information if the provider
 * implementation is unable to collect all of the necessary data.
 */
export type Host = 
        CPUTimer;
/**
 * NetworkCounters represents network stats from /proc/net
 */
export type NetworkCounters = any;
/**
 * SNMP represents the data from /proc/net/snmp
 * Note that according to RFC 2012,TCP.MaxConn, if present, is a signed value and should be cast to int64
 */
export interface SNMP {
    ip: { [key: string]: number /* uint64 */};
    icmp: { [key: string]: number /* uint64 */};
    icmp_msg: { [key: string]: number /* uint64 */};
    tcp: { [key: string]: number /* uint64 */};
    udp: { [key: string]: number /* uint64 */};
    udp_lite: { [key: string]: number /* uint64 */};
}
/**
 * Netstat represents the data from /proc/net/netstat
 */
export interface Netstat {
    tcp_ext: { [key: string]: number /* uint64 */};
    ip_ext: { [key: string]: number /* uint64 */};
}
/**
 * NetworkCountersInfo represents available network counters from /proc/net
 */
export interface NetworkCountersInfo {
    snmp: SNMP;
    netstat: Netstat;
}
/**
 * VMStat is the interface wrapper for platforms that support /proc/vmstat.
 */
export type VMStat = any;
/**
 * HostInfo contains basic host information.
 */
export interface HostInfo {
    architecture: string; // Process hardware architecture (e.g. x86_64, arm, ppc, mips).
    native_architecture: string; // Native OS hardware architecture (e.g. x86_64, arm, ppc, mips).
    boot_time: string; // Host boot time.
    containerized?: boolean; // Is the process containerized.
    name: string; // Hostname.
    ip?: string[]; // List of all IPs.
    kernel_version: string; // Kernel version.
    mac: string[]; // List of MAC addresses.
    os?: OSInfo; // OS information.
    timezone: string; // System timezone.
    timezone_offset_sec: number /* int */; // Timezone offset (seconds from UTC).
    id?: string; // Unique ID of the host (optional).
}
/**
 * OSInfo contains basic OS information
 */
export interface OSInfo {
    type: string; // OS Type (one of linux, macos, unix, windows).
    family: string; // OS Family (e.g. redhat, debian, freebsd, windows).
    platform: string; // OS platform (e.g. centos, ubuntu, windows).
    name: string; // OS Name (e.g. Mac OS X, CentOS).
    version: string; // OS version (e.g. 10.12.6).
    major: number /* int */; // Major release version.
    minor: number /* int */; // Minor release version.
    patch: number /* int */; // Patch release version.
    build?: string; // Build (e.g. 16G1114).
    codename?: string; // OS codename (e.g. jessie).
}
/**
 * LoadAverage is the interface that wraps the LoadAverage method.
 * LoadAverage returns load info on the host
 */
export type LoadAverage = any;
/**
 * LoadAverageInfo contains load statistics
 */
export interface LoadAverageInfo {
    one_min: number /* float64 */;
    five_min: number /* float64 */;
    fifteen_min: number /* float64 */;
}
/**
 * HostMemoryInfo (all values are specified in bytes).
 */
export interface HostMemoryInfo {
    total_bytes: number /* uint64 */; // Total physical memory.
    used_bytes: number /* uint64 */; // Total - Free
    available_bytes: number /* uint64 */; // Amount of memory available without swapping.
    free_bytes: number /* uint64 */; // Amount of memory not used by the system.
    virtual_total_bytes: number /* uint64 */; // Total virtual memory.
    virtual_used_bytes: number /* uint64 */; // VirtualTotal - VirtualFree
    virtual_free_bytes: number /* uint64 */; // Virtual memory that is not used.
    raw?: { [key: string]: number /* uint64 */}; // Other memory related metrics.
}
/**
 * VMStatInfo contains parsed info from /proc/vmstat.
 * This procfs file has expanded much over the years
 * with different kernel versions. If we don't have a field in vmstat,
 * the field in the struct will just be blank. The comments represent kernel versions.
 */
export interface VMStatInfo {
    nr_free_pages: number /* uint64 */; // (since Linux 2.6.31)
    nr_alloc_batch: number /* uint64 */; // (since Linux 3.12)
    nr_inactive_anon: number /* uint64 */; // (since Linux 2.6.28)
    nr_active_anon: number /* uint64 */; // (since Linux 2.6.28)
    nr_inactive_file: number /* uint64 */; // (since Linux 2.6.28)
    nr_active_file: number /* uint64 */; // (since Linux 2.6.28)
    nr_unevictable: number /* uint64 */; // (since Linux 2.6.28)
    nr_mlock: number /* uint64 */; // (since Linux 2.6.28)
    nr_anon_pages: number /* uint64 */; // (since Linux 2.6.18)
    nr_mapped: number /* uint64 */; // (since Linux 2.6.0)
    nr_file_pages: number /* uint64 */; // (since Linux 2.6.18)
    nr_dirty: number /* uint64 */; // (since Linux 2.6.0)
    nr_writeback: number /* uint64 */; // (since Linux 2.6.0)
    nr_slab_reclaimable: number /* uint64 */; // (since Linux 2.6.19)
    nr_slab_unreclaimable: number /* uint64 */; // (since Linux 2.6.19)
    nr_page_table_pages: number /* uint64 */; // (since Linux 2.6.0)
    nr_kernel_stack: number /* uint64 */; // (since Linux 2.6.32)  Amount of memory allocated to kernel stacks.
    nr_unstable: number /* uint64 */; // (since Linux 2.6.0)
    nr_bounce: number /* uint64 */; // (since Linux 2.6.12)
    nr_vmscan_write: number /* uint64 */; // (since Linux 2.6.19)
    nr_vmscan_immediate_reclaim: number /* uint64 */; // (since Linux 3.2)
    nr_writeback_temp: number /* uint64 */; // (since Linux 2.6.26)
    nr_isolated_anon: number /* uint64 */; // (since Linux 2.6.32)
    nr_isolated_file: number /* uint64 */; // (since Linux 2.6.32)
    nr_shmem: number /* uint64 */; // (since Linux 2.6.32) Pages used by shmem and tmpfs(5).
    nr_dirtied: number /* uint64 */; // (since Linux 2.6.37)
    nr_written: number /* uint64 */; // (since Linux 2.6.37)
    nr_pages_scanned: number /* uint64 */; // (since Linux 3.17)
    numa_hit: number /* uint64 */; // (since Linux 2.6.18)
    numa_miss: number /* uint64 */; // (since Linux 2.6.18)
    numa_foreign: number /* uint64 */; // (since Linux 2.6.18)
    numa_interleave: number /* uint64 */; // (since Linux 2.6.18)
    numa_local: number /* uint64 */; // (since Linux 2.6.18)
    numa_other: number /* uint64 */; // (since Linux 2.6.18)
    workingset_refault: number /* uint64 */; // (since Linux 3.15)
    workingset_activate: number /* uint64 */; // (since Linux 3.15)
    workingset_nodereclaim: number /* uint64 */; // (since Linux 3.15)
    nr_anon_transparent_hugepages: number /* uint64 */; // (since Linux 2.6.38)
    nr_free_cma: number /* uint64 */; // (since Linux 3.7)  Number of free CMA (Contiguous Memory Allocator) pages.
    nr_dirty_threshold: number /* uint64 */; // (since Linux 2.6.37)
    nr_dirty_background_threshold: number /* uint64 */; // (since Linux 2.6.37)
    pgpgin: number /* uint64 */; // (since Linux 2.6.0)
    pgpgout: number /* uint64 */; // (since Linux 2.6.0)
    pswpin: number /* uint64 */; // (since Linux 2.6.0)
    pswpout: number /* uint64 */; // (since Linux 2.6.0)
    pgalloc_dma: number /* uint64 */; // (since Linux 2.6.5)
    pgalloc_dma32: number /* uint64 */; // (since Linux 2.6.16)
    pgalloc_normal: number /* uint64 */; // (since Linux 2.6.5)
    pgalloc_high: number /* uint64 */; // (since Linux 2.6.5)
    pgalloc_movable: number /* uint64 */; // (since Linux 2.6.23)
    pgfree: number /* uint64 */; // (since Linux 2.6.0)
    pgactivate: number /* uint64 */; // (since Linux 2.6.0)
    pgdeactivate: number /* uint64 */; // (since Linux 2.6.0)
    pgfault: number /* uint64 */; // (since Linux 2.6.0)
    pgmajfault: number /* uint64 */; // (since Linux 2.6.0)
    pgrefill_dma: number /* uint64 */; // (since Linux 2.6.5)
    pgrefill_dma32: number /* uint64 */; // (since Linux 2.6.16)
    pgrefill_normal: number /* uint64 */; // (since Linux 2.6.5)
    pgrefill_high: number /* uint64 */; // (since Linux 2.6.5)
    pgrefill_movable: number /* uint64 */; // (since Linux 2.6.23)
    pgsteal_kswapd_dma: number /* uint64 */; // (since Linux 3.4)
    pgsteal_kswapd_dma32: number /* uint64 */; // (since Linux 3.4)
    pgsteal_kswapd_normal: number /* uint64 */; // (since Linux 3.4)
    pgsteal_kswapd_high: number /* uint64 */; // (since Linux 3.4)
    pgsteal_kswapd_movable: number /* uint64 */; // (since Linux 3.4)
    pgsteal_direct_dma: number /* uint64 */;
    pgsteal_direct_dma32: number /* uint64 */; // (since Linux 3.4)
    pgsteal_direct_normal: number /* uint64 */; // (since Linux 3.4)
    pgsteal_direct_high: number /* uint64 */; // (since Linux 3.4)
    pgsteal_direct_movable: number /* uint64 */; // (since Linux 2.6.23)
    pgscan_kswapd_dma: number /* uint64 */;
    pgscan_kswapd_dma32: number /* uint64 */; // (since Linux 2.6.16)
    pgscan_kswapd_normal: number /* uint64 */; // (since Linux 2.6.5)
    pgscan_kswapd_high: number /* uint64 */;
    pgscan_kswapd_movable: number /* uint64 */; // (since Linux 2.6.23)
    pgscan_direct_dma: number /* uint64 */; //     pgscan_direct_dma32: number /* uint64 */; // (since Linux 2.6.16)
    pgscan_direct_normal: number /* uint64 */;
    pgscan_direct_high: number /* uint64 */;
    pgscan_direct_movable: number /* uint64 */; // (since Linux 2.6.23)
    pgscan_direct_throttle: number /* uint64 */; // (since Linux 3.6)
    zone_reclaim_failed: number /* uint64 */; // (since linux 2.6.31)
    pginodesteal: number /* uint64 */; // (since linux 2.6.0)
    slabs_scanned: number /* uint64 */; // (since linux 2.6.5)
    kswapd_inodesteal: number /* uint64 */; // (since linux 2.6.0)
    kswapd_low_wmark_hit_quickly: number /* uint64 */; // (since 2.6.33)
    kswapd_high_wmark_hit_quickly: number /* uint64 */; // (since 2.6.33)
    pageoutrun: number /* uint64 */; // (since Linux 2.6.0)
    allocstall: number /* uint64 */; // (since Linux 2.6.0)
    pgrotated: number /* uint64 */; // (since Linux 2.6.0)
    drop_pagecache: number /* uint64 */; // (since Linux 3.15)
    drop_slab: number /* uint64 */; // (since Linux 3.15)
    numa_pte_updates: number /* uint64 */; // (since Linux 3.8)
    numa_huge_pte_updates: number /* uint64 */; // (since Linux 3.13)
    numa_hint_faults: number /* uint64 */; // (since Linux 3.8)
    numa_hint_faults_local: number /* uint64 */; // (since Linux 3.8)
    numa_pages_migrated: number /* uint64 */; // (since Linux 3.8)
    pgmigrate_success: number /* uint64 */; // (since Linux 3.8)
    pgmigrate_fail: number /* uint64 */; // (since Linux 3.8)
    compact_migrate_scanned: number /* uint64 */; // (since Linux 3.8)
    compact_free_scanned: number /* uint64 */; // (since Linux 3.8)
    compact_isolated: number /* uint64 */; // (since Linux 3.8)
    compact_stall: number /* uint64 */; // (since Linux 2.6.35) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    compact_fail: number /* uint64 */; // (since Linux 2.6.35) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    compact_success: number /* uint64 */; // (since Linux 2.6.35) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    htlb_buddy_alloc_success: number /* uint64 */; // (since Linux 2.6.26)
    htlb_buddy_alloc_fail: number /* uint64 */; // (since Linux 2.6.26)
    unevictable_pgs_culled: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_scanned: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_rescued: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_mlocked: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_munlocked: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_cleared: number /* uint64 */; // (since Linux 2.6.28)
    unevictable_pgs_stranded: number /* uint64 */; // (since Linux 2.6.28)
    thp_fault_alloc: number /* uint64 */; // (since Linux 2.6.39) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_fault_fallback: number /* uint64 */; // (since Linux 2.6.39) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_collapse_alloc: number /* uint64 */; // (since Linux 2.6.39) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_collapse_alloc_failed: number /* uint64 */; // (since Linux 2.6.39) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_split: number /* uint64 */; // (since Linux 2.6.39) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_zero_page_alloc: number /* uint64 */; // (since Linux 3.8) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    thp_zero_page_alloc_failed: number /* uint64 */; // (since Linux 3.8) See the kernel source file Documentation/admin-guide/mm/transhuge.rst.
    balloon_inflate: number /* uint64 */; // (since Linux 3.18)
    balloon_deflate: number /* uint64 */; // (since Linux 3.18)
    balloon_migrate: number /* uint64 */; // (since Linux 3.18)
    nr_tlb_remote_flush: number /* uint64 */; // (since Linux 3.12)
    nr_tlb_remote_flush_received: number /* uint64 */; // (since Linux 3.12)
    nr_tlb_local_flush_all: number /* uint64 */; // (since Linux 3.12)
    nr_tlb_local_flush_one: number /* uint64 */; // (since Linux 3.12)
    vmacache_find_calls: number /* uint64 */; // (since Linux 3.16)
    vmacache_find_hits: number /* uint64 */; // (since Linux 3.16)
    vmacache_full_flushes: number /* uint64 */; // (since Linux 3.19)
    /**
     * the following fields are not documented in `man 5 proc` as of 4.15
     */
    nr_zone_inactive_anon: number /* uint64 */;
    nr_zone_active_anon: number /* uint64 */;
    nr_zone_inactive_file: number /* uint64 */;
    nr_zone_active_file: number /* uint64 */;
    nr_zone_unevictable: number /* uint64 */;
    nr_zone_write_pending: number /* uint64 */;
    nr_zspages: number /* uint64 */;
    nr_shmem_hugepages: number /* uint64 */;
    nr_shmem_pmdmapped: number /* uint64 */;
    allocstall_dma: number /* uint64 */;
    allocstall_dma32: number /* uint64 */;
    allocstall_normal: number /* uint64 */;
    allocstall_movable: number /* uint64 */;
    pgskip_dma: number /* uint64 */;
    pgskip_dma32: number /* uint64 */;
    pgskip_normal: number /* uint64 */;
    pgskip_movable: number /* uint64 */;
    pglazyfree: number /* uint64 */;
    pglazyfreed: number /* uint64 */;
    pgrefill: number /* uint64 */;
    pgsteal_kswapd: number /* uint64 */;
    pgsteal_direct: number /* uint64 */;
    pgscan_kswapd: number /* uint64 */;
    pgscan_direct: number /* uint64 */;
    oom_kill: number /* uint64 */;
    compact_daemon_wake: number /* uint64 */;
    compact_daemon_migrate_scanned: number /* uint64 */;
    compact_daemon_free_scanned: number /* uint64 */;
    thp_file_alloc: number /* uint64 */;
    thp_file_mapped: number /* uint64 */;
    thp_split_page: number /* uint64 */;
    thp_split_page_failed: number /* uint64 */;
    thp_deferred_split_page: number /* uint64 */;
    thp_split_pmd: number /* uint64 */;
    thp_split_pud: number /* uint64 */;
    thp_swpout: number /* uint64 */;
    thp_swpout_fallback: number /* uint64 */;
    swap_ra: number /* uint64 */;
    swap_ra_hit: number /* uint64 */;
}

//////////
// source: process.go

/**
 * Process is the main wrapper for gathering information on a process
 */
export type Process = 
        CPUTimer;
/**
 * ProcessInfo contains basic stats about a process
 */
export interface ProcessInfo {
    name: string;
    pid: number /* int */;
    ppid: number /* int */;
    cwd: string;
    exe: string;
    args: string[];
    start_time: string;
}
/**
 * UserInfo contains information about the UID and GID
 * values of a process.
 */
export interface UserInfo {
    /**
     * UID is the user ID.
     * On Linux and Darwin (macOS) this is the real user ID.
     * On Windows, this is the security identifier (SID) of the
     * user account of the process access token.
     */
    uid: string;
    /**
     * On Linux and Darwin (macOS) this is the effective user ID.
     * On Windows, this is empty.
     */
    euid: string;
    /**
     * On Linux and Darwin (macOS) this is the saved user ID.
     * On Windows, this is empty.
     */
    suid: string;
    /**
     * GID is the primary group ID.
     * On Linux and Darwin (macOS) this is the real group ID.
     * On Windows, this is the security identifier (SID) of the
     * primary group of the process access token.
     */
    gid: string;
    /**
     * On Linux and Darwin (macOS) this is the effective group ID.
     * On Windows, this is empty.
     */
    egid: string;
    /**
     * On Linux and Darwin (macOS) this is the saved group ID.
     * On Windows, this is empty.
     */
    sgid: string;
}
/**
 * Environment is the interface that wraps the Environment method.
 * Environment returns variables for a process
 */
export type Environment = any;
/**
 * OpenHandleEnumerator is the interface that wraps the OpenHandles method.
 * OpenHandles lists the open file handles.
 */
export type OpenHandleEnumerator = any;
/**
 * OpenHandleCounter is the interface that wraps the OpenHandleCount method.
 * OpenHandleCount returns the number of open file handles.
 */
export type OpenHandleCounter = any;
/**
 * CPUTimer is the interface that wraps the CPUTime method.
 * CPUTime returns CPU time info
 */
export type CPUTimer = any;
/**
 * CPUTimes contains CPU timing stats for a process
 */
export interface CPUTimes {
    user: any /* time.Duration */;
    system: any /* time.Duration */;
    idle?: any /* time.Duration */;
    iowait?: any /* time.Duration */;
    irq?: any /* time.Duration */;
    nice?: any /* time.Duration */;
    soft_irq?: any /* time.Duration */;
    steal?: any /* time.Duration */;
}
/**
 * MemoryInfo contains memory stats for a process
 */
export interface MemoryInfo {
    resident_bytes: number /* uint64 */;
    virtual_bytes: number /* uint64 */;
    raw?: { [key: string]: number /* uint64 */}; // Other memory related metrics.
}
/**
 * SeccompInfo contains seccomp info for a process
 */
export interface SeccompInfo {
    mode: string;
    no_new_privs?: boolean; // Added in kernel 4.10.
}
/**
 * CapabilityInfo contains capability set info.
 */
export interface CapabilityInfo {
    inheritable: string[];
    permitted: string[];
    effective: string[];
    bounding: string[];
    ambient: string[];
}
/**
 * Capabilities is the interface that wraps the Capabilities method.
 * Capabilities returns capabilities for a process
 */
export type Capabilities = any;
/**
 * Seccomp is the interface that wraps the Seccomp method.
 * Seccomp returns seccomp info on Linux
 */
export type Seccomp = any;
